---
description: 
globs: 
alwaysApply: true
---
# Agent Workflow Rules - SWE Agent Compliance

**Purpose:** Specific workflow rules for AI/SWE agents to ensure proper integration with development tools, processes, and quality gates. These rules govern agent behavior when working autonomously on software development tasks.

**When to use:** AI agents, automated development workflows, SWE bots, or any autonomous system performing development tasks.

## Work Organization and Planning

**Rule: Organize work as milestones, phases, and priorities - never add timelines, schedules, or estimates.**
Why: Agile development focuses on value delivery over time predictions. Estimates are often inaccurate and create false expectations. Priorities and milestones provide clear direction without artificial time constraints.

**Implementation:**
```markdown
# ✅ GOOD - Use milestones and priorities
## Milestone 1: Core Authentication
- High Priority: JWT token validation
- Medium Priority: Session management  
- Low Priority: Multi-factor authentication

## Phase 2: User Management
- User creation and validation
- Role-based access control
- Account management features

# ❌ BAD - Avoid timelines and estimates  
## Week 1 (Est. 15 hours)
- [ ] JWT implementation (5 hours)
- [ ] Session management (8 hours)
- [ ] Testing (2 hours)
```

## Git Workflow Compliance

**Rule: Never bypass git pre-commit hooks - always run validation before committing.**
Why: Pre-commit hooks maintain code quality and catch issues early. Bypassing them, even for documentation, can introduce inconsistencies and break CI/CD pipelines.

**Enforcement:**
- **NEVER use:** `git commit --no-verify`
- **NEVER use:** `git commit -n` 
- **ALWAYS run:** Standard `git commit` to trigger pre-commit validation
- **Applies to:** All commits including docs-only, formatting fixes, or minor changes

```bash
# ✅ ALWAYS do this
git add .
git commit -m "docs: update API documentation"

# ❌ NEVER do this - even for docs
git commit --no-verify -m "docs: quick fix"
git commit -n -m "format: minor spacing"
```

**Rule: Always push your changes upstream, once you have a successful commit.**
Why: Pushing changes upstream makes sure that the changes are available for others to work with, safe and protected from system failures and also closes the relevant issues on GitHub automatically.

## Issue Resolution Verification

**Rule: Before committing, verify the change completely fixes the issue and meets all requirements.**
Why: Incomplete solutions create technical debt, confuse stakeholders, and require additional work cycles. Thorough verification prevents rework and ensures deliverable quality.

**Pre-commit Verification Checklist:**
```markdown
Before committing any issue fix:
- [ ] Read the original issue requirements completely
- [ ] Verify each requirement is addressed in the code
- [ ] Test the specific scenarios mentioned in the issue
- [ ] Ensure no placeholder code or TODOs remain
- [ ] Verify error cases and edge conditions are handled
- [ ] Check that related functionality still works
- [ ] Confirm the fix doesn't introduce new issues
```

**Code Review Questions:**
- Does this change solve the exact problem described?
- Are all acceptance criteria met?
- Would someone reviewing this code understand the complete solution?
- Are there any stubs, TODOs, or incomplete implementations?

## Design-First Development

**Rule: Write detailed solution/design in issue comment before starting work - stick to it or update it.**
Why: Solution comments serve as implementation contracts, prevent scope creep, and provide audit trails. They complement the formal design documents from dev-best-practices.md with issue-specific implementation plans.

**Solution Comment Template (for GitHub issue comments):**
```markdown
## Solution Design

### Problem Analysis
- Root cause of the issue
- Impact on existing functionality
- Requirements and constraints

### Proposed Approach
```rust
// High-level API design
pub struct UserManager {
    repository: Arc<dyn UserRepository>,
    validator: UserValidator,
}

impl UserManager {
    pub async fn create_user(&self, request: CreateUserRequest) -> Result<User, UserError> {
        // Implementation approach
    }
}
```

### Implementation Steps
1. **Phase 1**: Core data structures and validation
2. **Phase 2**: Database integration and persistence
3. **Phase 3**: API endpoints and error handling
4. **Phase 4**: Testing and documentation

### Testing Strategy
- Unit tests for validation logic
- Integration tests for database operations
- End-to-end tests for API workflows

### Breaking Changes
- None expected / List any breaking changes

### Alternative Approaches Considered
- Approach A: Trade-offs and why not chosen
- Approach B: Trade-offs and why not chosen
```

**Design Change Protocol:**
- If implementation diverges from design: **Update the solution comment first**
- Explain why the change was necessary
- Document new approach with same detail level
- Tag relevant stakeholders if scope significantly changes

## GitHub Integration

**Rule: Use `closes #<issue_number>` in commit messages to auto-close issues.**
Why: Automatic issue closure maintains clean project state, provides clear audit trails, and links commits to their motivating issues for better project history.

**Commit Message Format:**
```bash
# ✅ GOOD - Auto-closes issue
git commit -m "feat(auth): implement JWT token validation

- Add JWT signing and verification
- Include expiration handling
- Add comprehensive error types
- Add unit tests with 95% coverage

closes #123"

# ✅ GOOD - Multiple issues
git commit -m "fix(parser): handle edge cases in CSV processing

- Fix null value handling
- Add validation for malformed headers  
- Improve error messages

closes #456, closes #789"

# ❌ BAD - Missing issue reference
git commit -m "feat(auth): implement JWT validation"
```

**Issue Reference Guidelines:**
- Use `closes #123` for bug fixes and feature implementations
- Use `addresses #123` for partial solutions requiring follow-up
- Use `related to #123` for tangential changes
- Always include issue number in commit message
- One commit should typically close one issue (unless they're tightly coupled)

## System Integration

**Rule: Use `date` command to check current date for time-sensitive operations.**
Why: Autonomous agents need accurate temporal context for logging, versioning, and time-sensitive business logic. System time provides reliable reference point.

**Usage Patterns:**
```bash
# ✅ Getting current date for logging
CURRENT_DATE=$(date +%Y-%m-%d)
echo "Build started on: $CURRENT_DATE"

# ✅ Timestamp for version generation
VERSION="1.0.0-$(date +%Y%m%d)"

# ✅ Time-sensitive file operations
BACKUP_FILE="config_backup_$(date +%Y%m%d_%H%M%S).toml"
```

**When to use date command:**
- Creating timestamped backups or logs
- Generating version numbers with date components  
- Time-sensitive business logic (expiration, scheduling)
- Audit trail generation
- Determining if cached data is stale

## Tool-Specific Workarounds

**Rule: When using GitHub CLI through run_terminal_cmd, add `| cat` to prevent pager crashes.**
Why: The GitHub CLI uses interactive pagers that can cause crashes in non-interactive terminal environments. Piping to `cat` forces plain text output.

**GitHub CLI Commands:**
```bash
# ✅ GOOD - Prevents pager issues
gh pr list | cat
gh issue view 123 | cat  
gh repo view | cat
gh api repos/:owner/:repo/pulls | cat

# ❌ BAD - May crash in automated environments
gh pr list
gh issue view 123
gh repo view
```

**Other Tool Considerations:**
```bash
# Similar pattern for other interactive tools
git log --oneline | cat
less +F /var/log/app.log | cat  # If using less in automation
man command | cat              # If programmatically reading man pages
```

**When to apply this rule:**
- Any `gh` command that might display paginated output
- Running in CI/CD environments
- Automated scripts using GitHub CLI
- Terminal commands in containerized environments
- Any context where stdout will be captured/processed

## Compliance Verification

**Agent Self-Check Before Any Action:**
```markdown
- [ ] Am I organizing work by priorities/milestones (not timelines)?
- [ ] Am I running full git commit (not bypassing pre-commit)?
- [ ] Have I verified this change completely fixes the issue?
- [ ] Did I write/update the solution design comment?
- [ ] Does my commit message include "closes #<number>"?
- [ ] Do I need current date for this operation?
- [ ] Am I using "| cat" with any gh commands?
```

**These rules ensure autonomous agents work effectively within established development workflows while maintaining quality and process compliance.**