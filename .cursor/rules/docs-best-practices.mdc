---
description: 
globs: *.md,*.rst,**/*.md,*.rs,**/*.rs
alwaysApply: false
---
# Documentation Rules - Accuracy & Completeness

**Purpose:** Ensures all documentation is accurate, complete, and synchronized with actual codebase. Prevents documentation drift, validates code examples, and maintains high-quality user experience through reliable documentation.

**When to use:** All documentation writing, code example creation, API documentation, user guides, and any content that references code functionality.

## Code Snippet Accuracy

**Rule: Every code snippet in documentation must be verified to compile and work with the current codebase.**
Why: Broken documentation examples frustrate users, waste developer time, and damage project credibility. Accurate examples ensure users can successfully follow documentation.

**Code Snippet Validation Process:**
```bash
# 1. Extract all code snippets from documentation
find docs/ -name "*.md" -exec grep -l "```rust" {} \;

# 2. Create temporary test files for each snippet
# 3. Verify compilation with current dependencies
cargo check --manifest-path snippet_test/Cargo.toml

# 4. Run doc tests to verify examples work
cargo test --doc --all-features

# 5. Integration test with actual codebase APIs
cargo test --test doc_example_validation
```

**Snippet Requirements:**
- **Must Compile**: Every ````rust` block must compile successfully
- **Must Execute**: Examples with `assert!` must run and pass
- **Current Dependencies**: Use exact versions from project Cargo.toml
- **Complete Context**: Include necessary imports and setup code
- **Error Handling**: Show proper error handling patterns

**Example of Correct Code Snippet:**
```rust
/// # Examples
/// ```
/// use my_crate::{UserManager, CreateUserRequest, UserError};
/// 
/// # tokio_test::block_on(async {
/// let manager = UserManager::new().await?;
/// let request = CreateUserRequest {
///     email: "test@example.com".to_string(),
///     name: "Test User".to_string(),
/// };
/// 
/// let user = manager.create_user(request).await?;
/// assert_eq!(user.email(), "test@example.com");
/// # Ok::<(), UserError>(())
/// # });
/// ```
```

## API Documentation Synchronization

**Rule: API documentation must exactly match the current function signatures, types, and behavior.**
Why: Incorrect API documentation leads to integration failures, confusion, and wasted development time. Documentation must be the authoritative source of truth.

**API Sync Verification:**
```bash
# Generate documentation and check for warnings
cargo doc --all-features --no-deps 2>&1 | grep -i "warning\|error"

# Verify no broken intra-doc links
cargo doc --all-features --no-deps --document-private-items

# Check that public API documentation exists
cargo doc --all-features --document-private-items --open
# Manually verify all public items have documentation
```

**Required Documentation Elements:**
```rust
/// Brief description of what the function does.
///
/// Longer description explaining the purpose, use cases, and any important
/// implementation details that affect usage.
///
/// # Arguments
/// * `param1` - Description of first parameter, including type constraints
/// * `param2` - Description of second parameter and expected values
///
/// # Returns
/// Description of return value, including all possible variants for Result types:
/// - `Ok(User)` - Successfully created user with validated data
/// - `Err(UserError::InvalidEmail)` - Email format validation failed
/// - `Err(UserError::DatabaseError)` - Database operation failed
///
/// # Errors
/// This function will return an error if:
/// - Email format is invalid (checked against RFC 5322)
/// - Database connection fails or times out
/// - User with email already exists in system
///
/// # Panics
/// This function panics if:
/// - Internal invariants are violated (should never happen in normal usage)
/// - System resources are exhausted (extremely rare)
///
/// # Examples
/// ```
/// # use my_crate::*;
/// # tokio_test::block_on(async {
/// let user = create_user("valid@example.com", "John Doe").await?;
/// assert_eq!(user.email(), "valid@example.com");
/// # Ok::<(), UserError>(())
/// # });
/// ```
///
/// # Safety
/// This function is thread-safe and can be called concurrently.
/// 
/// # Performance
/// Expected execution time: <5ms for standard inputs.
/// Memory usage: O(1) relative to input size.
pub async fn create_user(email: &str, name: &str) -> Result<User, UserError> {
    // Implementation
}
```

## Documentation Completeness Verification

**Rule: All public APIs, modules, and user-facing features must have complete documentation.**
Why: Incomplete documentation creates knowledge gaps, forces users to read source code, and reduces project adoption and usability.

**Completeness Checklist:**
```markdown
## Public API Documentation Audit

### Crate Level
- [ ] lib.rs has comprehensive module documentation
- [ ] README.md covers installation, basic usage, and key features
- [ ] CHANGELOG.md documents all user-facing changes
- [ ] Cargo.toml has accurate description and keywords

### Module Level  
- [ ] Every public module has module documentation (//!)
- [ ] Module docs explain purpose and relationships
- [ ] Key types and functions are re-exported clearly
- [ ] Usage examples provided for complex modules

### Function Level
- [ ] Every public function has rustdoc comments
- [ ] All parameters documented with types and constraints
- [ ] Return values explained including all Result variants
- [ ] Error conditions enumerated completely
- [ ] Working examples provided and tested
- [ ] Performance characteristics noted when relevant

### Type Level
- [ ] Every public struct/enum has documentation
- [ ] Field purposes explained (for public fields)
- [ ] Usage patterns and examples provided
- [ ] Relationship to other types explained
- [ ] Serialization format documented (if applicable)

### Feature Level
- [ ] Feature flags documented in Cargo.toml and README
- [ ] Optional dependencies explained
- [ ] Feature combinations tested and documented
- [ ] Migration guides for breaking changes
```

**Documentation Coverage Measurement:**
```bash
# Check for missing documentation warnings
cargo doc --all-features 2>&1 | grep "missing documentation"

# Generate documentation with all warnings enabled
RUSTDOCFLAGS="-D missing-docs" cargo doc --all-features

# Count documented vs undocumented public items
cargo doc --all-features --document-private-items --quiet
# Then audit manually or with tooling
```

## User Guide Accuracy

**Rule: User guides and tutorials must be validated against actual software behavior and updated workflows.**
Why: Outdated user guides lead to frustration, failed onboarding, and support burden. Guides must reflect current software capabilities and recommended practices.

**User Guide Validation Process:**
```bash
# 1. Follow each tutorial step-by-step in clean environment
# 2. Verify all commands work as documented
# 3. Check that examples produce expected output
# 4. Validate installation instructions on supported platforms
# 5. Test troubleshooting sections with real error scenarios
```

**User Guide Requirements:**
- **Step-by-Step Validation**: Every tutorial step tested manually
- **Platform Coverage**: Instructions for all supported platforms
- **Version Accuracy**: References to specific, current version numbers
- **Screenshot Currency**: UI screenshots reflect current interface
- **Link Validation**: All external links working and relevant
- **Error Scenarios**: Common errors and solutions documented

**Tutorial Structure Template:**
```markdown
# [Feature] Tutorial

## Prerequisites
- Software version: v1.2.3 or later
- System requirements: [specific requirements]
- Background knowledge: [what users should know first]

## Overview
Brief explanation of what users will accomplish and why it's useful.

## Step 1: [Action]
```bash
# Exact command that works with current version
command --flag value
```

Expected output:
```
[Exact output users should see]
```

## Step 2: [Next Action]
[Continue with validated steps...]

## Troubleshooting
**Problem**: Common error message users might see
**Solution**: Specific steps to resolve, tested and verified

## Next Steps
- Link to related tutorials
- Advanced usage patterns
- Reference documentation
```

## Code Example Maintenance

**Rule: Establish automated processes to detect and fix outdated code examples.**
Why: Manual documentation maintenance is error-prone and often skipped. Automated validation ensures examples stay current as code evolves.

**Automated Example Validation:**
```rust
// tests/doc_examples.rs
//! Integration tests that validate documentation examples

use my_crate::*;

#[tokio::test]
async fn test_readme_quick_start_example() {
    // Copy exact example from README.md
    let user_manager = UserManager::new().await.expect("Manager creation failed");
    
    let request = CreateUserRequest {
        email: "test@example.com".to_string(),
        name: "Test User".to_string(),
    };
    
    let user = user_manager.create_user(request).await.expect("User creation failed");
    assert_eq!(user.email(), "test@example.com");
    
    // This test failing indicates README example is broken
}

#[test]
fn test_api_docs_examples() {
    // Extract and test examples from rustdoc
    // This can be automated with custom tooling
}
```

**Documentation CI/CD Integration:**
```yaml
# .github/workflows/docs.yml
name: Documentation Validation

on: [push, pull_request]

jobs:
  validate-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      
      - name: Check documentation builds without warnings
        run: RUSTDOCFLAGS="-D missing-docs -D warnings" cargo doc --all-features
        
      - name: Test documentation examples
        run: cargo test --doc --all-features
        
      - name: Validate README examples
        run: cargo test --test doc_examples
        
      - name: Check for broken links
        run: |
          cargo install lychee
          lychee --exclude-loopback docs/**/*.md README.md
          
      - name: Validate API documentation completeness
        run: |
          # Custom script to check all public APIs have docs
          python scripts/check_api_docs_completeness.py
```

## Version Synchronization

**Rule: Documentation must reference correct version numbers, feature availability, and compatibility information.**
Why: Version mismatches in documentation cause confusion about feature availability, compatibility issues, and failed integrations.

**Version Reference Standards:**
```markdown
## Version Documentation Requirements

### Installation Instructions
```toml
[dependencies]
my_crate = "1.2.3"  # Always current released version
```

### Feature Availability
- "Available since v1.1.0" for new features
- "Deprecated in v1.3.0, use X instead" for deprecated features
- "Breaking change in v2.0.0" for major changes

### Compatibility Matrix
| my_crate | Rust | tokio | serde |
|----------|------|-------|-------|
| 1.2.x    | 1.70+ | 1.x   | 1.x   |
| 1.1.x    | 1.65+ | 1.x   | 1.x   |
```

**Automated Version Checking:**
```python
# scripts/check_version_references.py
#!/usr/bin/env python3
"""Validate version references in documentation."""

import re
import subprocess
from pathlib import Path

def get_current_version():
    """Get current version from Cargo.toml."""
    with open("Cargo.toml") as f:
        content = f.read()
        match = re.search(r'version = "([^"]+)"', content)
        return match.group(1) if match else None

def check_version_references():
    """Check all documentation for correct version references."""
    current_version = get_current_version()
    if not current_version:
        print("❌ Could not determine current version")
        return False
    
    issues = []
    
    for doc_file in Path("docs").rglob("*.md"):
        with open(doc_file) as f:
            content = f.read()
            
        # Check for version references in installation examples
        toml_blocks = re.findall(r'```toml.*?```', content, re.DOTALL)
        for block in toml_blocks:
            if 'my_crate = ' in block:
                if current_version not in block:
                    issues.append(f"{doc_file}: outdated version in installation example")
    
    if issues:
        for issue in issues:
            print(f"❌ {issue}")
        return False
    
    print("✅ All version references are current")
    return True

if __name__ == "__main__":
    import sys
    if not check_version_references():
        sys.exit(1)
```

## Documentation Quality Gates

**Rule: Implement quality gates that prevent documentation regressions and ensure accuracy.**
Why: Quality gates maintain documentation standards consistently, catch issues before they reach users, and ensure documentation remains a reliable resource.

**Pre-Commit Documentation Checks:**
```bash
# Add to pre-commit hook
echo "🔍 Validating documentation..."

# Check that documentation builds without warnings
if ! RUSTDOCFLAGS="-D warnings" cargo doc --all-features --quiet; then
    echo "❌ Documentation build failed or has warnings"
    exit 1
fi

# Validate documentation examples
if ! cargo test --doc --all-features --quiet; then
    echo "❌ Documentation examples failed"
    exit 1
fi

# Check for common documentation issues
if python scripts/check_doc_quality.py; then
    echo "✅ Documentation quality checks passed"
else
    echo "❌ Documentation quality issues found"
    exit 1
fi
```

**Documentation Review Checklist:**
```markdown
## Documentation Review Requirements

### Accuracy Review
- [ ] All code examples compile and run successfully
- [ ] API documentation matches current function signatures
- [ ] Version references are current and correct
- [ ] External links are working and relevant
- [ ] Screenshots reflect current UI (if applicable)

### Completeness Review
- [ ] All public APIs have comprehensive documentation
- [ ] Error conditions are documented completely
- [ ] Examples cover common use cases
- [ ] Performance characteristics noted where relevant
- [ ] Migration guides provided for breaking changes

### Quality Review
- [ ] Writing is clear and beginner-friendly
- [ ] Technical terms are defined or linked
- [ ] Examples progress from simple to complex
- [ ] Troubleshooting covers common issues
- [ ] Cross-references between related topics

### Maintenance Review
- [ ] Documentation CI passes completely
- [ ] No broken internal or external links
- [ ] All examples validated in current environment
- [ ] Version compatibility information updated
- [ ] Deprecation notices accurate and helpful
```

**Documentation Maintenance Schedule:**
```markdown
## Regular Documentation Maintenance

### With Every Release
- [ ] Update version numbers in installation instructions
- [ ] Add changelog entries for user-facing changes
- [ ] Update compatibility matrices
- [ ] Validate all examples with new version
- [ ] Update screenshots if UI changed

### Monthly Audits
- [ ] Check external links for broken/redirected URLs
- [ ] Review analytics for confusing documentation sections
- [ ] Test tutorials in fresh environments
- [ ] Update performance benchmarks in docs
- [ ] Review and update troubleshooting sections

### Quarterly Reviews
- [ ] Complete documentation structure review
- [ ] User feedback analysis and incorporation
- [ ] Competitive documentation analysis
- [ ] Documentation tooling evaluation and updates
- [ ] Style guide updates based on lessons learned
```

**These rules ensure documentation remains accurate, complete, and valuable throughout the project lifecycle.**