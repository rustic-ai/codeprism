---
description: Enforces structured development workflow using GitHub issues, milestones, and projects. Ensures systematic progression through milestone-focused development with comprehensive tracking and verification.
globs: 
alwaysApply: false
---
# GitHub Development Workflow Rules

**Purpose:** Enforces structured development workflow using GitHub issues, milestones, and projects. Ensures systematic progression through milestone-focused development with comprehensive tracking and verification.

**When to use:** All development work in GitHub repositories, milestone-based projects, systematic feature development, and any work requiring complete traceability.

## Milestone-Focused Development

**Rule: Work on ONE milestone at a time from start to complete finish.**
Why: Focused development ensures functional releases, prevents context switching, and maintains clear progress tracking. Milestones represent complete functional value delivery.

**Milestone Requirements:**
- **Start Only One**: Never work on multiple milestones simultaneously
- **Complete ALL Issues**: Milestone is done only when 100% of issues are closed
- **No Partial Releases**: Don't close milestone until every issue is resolved
- **Emergency Exception**: Only P0 critical bugs can interrupt current milestone

**Milestone Selection Process:**
```bash
# Check current milestone status
gh issue list --milestone "current-milestone" --state open

# If no open issues in current milestone, select next milestone
# If issues remain, continue working on current milestone
```

## Issue Discovery and Creation

**Rule: Immediately create new issues when discovering bugs, limitations, or missing work during development.**
Why: Comprehensive tracking prevents lost work, maintains milestone completeness, and provides audit trail for all discovered requirements.

**Discovery Triggers - Create New Issue When:**
- **Bug Found**: Code doesn't work as expected during testing
- **Design Limitation**: Current approach won't achieve requirements  
- **Missing Functionality**: Additional work needed for completion
- **Performance Issue**: Implementation doesn't meet requirements
- **Integration Problem**: Feature doesn't work with existing code
- **Documentation Gap**: Missing or incorrect documentation

**New Issue Creation Process:**
```bash
# Stop current work, create issue immediately
gh issue create --title "Bug: [description]" \
  --body "Discovered while working on #123
  
## Problem
[Description of discovered issue]

## Impact  
[How this affects original work]

## Required Action
[What needs to be done]" \
  --label "found-during-dev,bug,P1" \
  --milestone "current-milestone"

# Link to original issue in description
# Assign appropriate priority based on impact
# Always assign to current milestone
```

**Issue Linking Requirements:**
- **Reference Original**: "Discovered while working on #123"
- **Explain Impact**: How discovery affects original work
- **Set Priority**: Based on blocking impact on milestone
- **Assign to Current Milestone**: Keep all related work together

## Documentation-First + TDD Workflow

**Rule: Every issue must follow Documentation-First + TDD workflow before any implementation.**
Why: Documentation-first ensures clear requirements understanding, TDD ensures robust implementation, and this combination prevents rework and missing requirements.

**Mandatory Workflow Sequence:**
```markdown
1. **Documentation Phase** (before any code)
   - Write/update design documentation for the issue
   - Document expected API and behavior
   - Define acceptance criteria clearly
   - Update user documentation if needed

2. **TDD Phase** (before implementation)  
   - Write failing tests first (red phase)
   - Write minimal code to pass tests (green phase)
   - Refactor code while keeping tests green
   - Repeat until feature complete

3. **Implementation Phase**
   - Complete implementation following TDD cycle
   - Maintain test coverage ≥90%
   - Follow code quality rules from rust-essentials.md

4. **Verification Phase** (mandatory before completion)
   - Run complete verification checklist
   - Create additional issues if problems discovered
   - Only proceed to commit after verification passes

5. **Commit & Push Phase** (mandatory after verification)
   - Commit all changes with proper issue linking
   - Push changes to upstream repository
   - Ensure all work is saved and available

6. **Issue Completion**
   - Mark issue as done only after commit/push complete
   - Update issue status to reflect completion
```

**Documentation Requirements:**
- **API Documentation**: Every public function has rustdoc with examples
- **User Documentation**: Feature usage and integration guides
- **Design Documentation**: Technical approach and architecture decisions
- **Test Documentation**: Test strategy and coverage rationale

## Task Completion Verification

**Rule: No issue can be marked as 'done' without completing the full verification checklist.**
Why: Systematic verification prevents incomplete work, ensures quality standards, and catches integration issues before they compound.

**Mandatory Verification Checklist:**
```markdown
## Task Completion Verification (Required Before Done)

### Requirements Verification
- [ ] Re-read original issue requirements completely
- [ ] Verify each requirement is implemented and working
- [ ] Test all scenarios mentioned in issue description  
- [ ] Confirm acceptance criteria are met
- [ ] Verify solution matches documented design

### Discovery Assessment
- [ ] Any bugs discovered during development?
- [ ] Any design limitations or issues found?
- [ ] Any missing functionality identified?
- [ ] Any performance/integration problems found?
- [ ] Any documentation gaps discovered?
- [ ] **If yes to any above: Created new issues in current milestone**

### Code Quality Verification
- [ ] All tests pass (unit, integration, doc tests)
- [ ] Code coverage ≥90% (verified with tarpaulin)
- [ ] No clippy warnings remain (cargo clippy --deny warnings)
- [ ] Code properly formatted (cargo fmt --check)
- [ ] All public APIs have rustdoc with working examples

### Documentation Verification  
- [ ] API documentation updated and accurate
- [ ] User documentation reflects new functionality
- [ ] Code examples in docs work correctly
- [ ] Breaking changes documented (if any)
- [ ] Design decisions documented

### Integration Verification
- [ ] Feature works with existing functionality
- [ ] No regressions introduced (full test suite passes)
- [ ] Performance requirements met (benchmarks pass)
- [ ] Error handling works as expected
- [ ] Proper logging and observability added

### Milestone Impact Verification
- [ ] Task contributes to milestone completion goals
- [ ] All discovered issues tracked and prioritized
- [ ] No untracked work remaining
- [ ] Implementation aligns with milestone objectives

### Pre-Commit Verification
- [ ] All changes staged and ready for commit
- [ ] Commit message prepared with issue linking
- [ ] Pre-commit hook will be allowed to run (no --no-verify)
- [ ] Ready to fix any pre-commit failures properly
- [ ] Ready to push to upstream repository after successful commit
```

**Verification Enforcement:**
- **Change Status**: Move issue to `verification` status during checklist
- **Document Results**: Add verification results as issue comment
- **Create Issues**: For any problems discovered during verification
- **Complete Commit/Push**: After ALL checklist items are confirmed
- **Only Mark Done**: After successful commit and push to upstream

## Priority-Based Work Within Milestones

**Rule: Work on issues in strict priority order within the current milestone only.**
Why: Priority order ensures critical work completes first, systematic progression prevents jumping between tasks, and milestone focus maintains delivery commitment.

**Priority Definitions:**
- **P0**: Critical blockers preventing milestone completion (work immediately)
- **P1**: Core functionality required for milestone (work after P0s)
- **P2**: Important features included in milestone scope (work after P1s)
- **P3**: Additional enhancements committed to milestone (work after P2s)
- **P4**: Lower priority items still required for completion (work after P3s)
- **P5**: Nice-to-have items included in milestone (work last)

**Work Selection Process:**
```bash
# Always work highest priority first within current milestone
gh issue list --milestone "current-milestone" \
  --label "P0" --state open

# If no P0s, then P1s
gh issue list --milestone "current-milestone" \
  --label "P1" --state open

# Continue through P2, P3, P4, P5 in order
# Never skip priorities or work across milestones
```

**Priority Assignment for Discovered Issues:**
- **P0**: Blocks completion of milestone functionality
- **P1**: Required for milestone to work correctly  
- **P2**: Important for milestone quality
- **P3**: Enhancements discovered during work
- **P4/P5**: Future considerations (consider moving to next milestone)

## GitHub Status Management

**Rule: Maintain accurate issue status throughout development lifecycle.**
Why: Status tracking provides visibility into work progress, prevents duplicated effort, and enables proper project management.

**Required Status Progression:**
```
todo → in-progress → (blocked) → needs-review → verification → commit/push → done
```

**Status Update Requirements:**
- **Change Status Immediately**: When work state changes
- **Add Context Comments**: Explain status changes and progress
- **Link Related Work**: Reference PRs, commits, and related issues
- **Update Project Board**: Ensure project view reflects current status
- **Commit After Verification**: Always commit/push before marking done

**Status Definitions:**
- **todo**: Ready to start, requirements clear
- **in-progress**: Actively working on implementation
- **blocked**: Cannot proceed due to dependency or issue
- **needs-review**: Implementation complete, ready for review
- **verification**: Running completion verification checklist
- **commit/push**: Committing changes and pushing to upstream
- **done**: All work complete and changes pushed to repository

## Milestone Completion Requirements

**Rule: Milestone is complete only when ALL issues (original + discovered) are resolved.**
Why: Complete milestone resolution ensures functional releases, maintains quality standards, and provides predictable delivery cadence.

**Completion Verification:**
```bash
# Check milestone completion status
gh issue list --milestone "current-milestone" --state open

# Should return NO open issues for milestone to be complete
# If any issues remain, milestone is not complete
```

**Pre-Release Checklist:**
```markdown
## Milestone Completion Verification

### Issue Resolution
- [ ] ALL original milestone issues closed
- [ ] ALL discovered issues resolved  
- [ ] No open issues remain in milestone
- [ ] All issue verification checklists completed

### Integration Testing
- [ ] Full test suite passes for milestone
- [ ] Integration tests verify feature interactions
- [ ] Performance benchmarks meet requirements
- [ ] Documentation reflects all changes

### Release Preparation
- [ ] Release notes generated from milestone issues
- [ ] Breaking changes documented
- [ ] Migration guides updated (if needed)
- [ ] Version number incremented appropriately
```

## Commit and Push Requirements

**Rule: After completing verification, immediately commit all changes and push to upstream repository.**
Why: Ensures work is preserved, enables collaboration, maintains development history, and prevents loss of completed work.

**Commit Process (Mandatory After Verification):**
```bash
# 1. Stage all changes
git add .

# 2. Commit with proper issue linking and detailed message
# IMPORTANT: NEVER use --no-verify or -n to bypass pre-commit hooks
git commit -m "feat(component): implement feature description

- Detailed list of what was implemented
- Include any important technical decisions
- Note any discovered issues that were created
- Reference verification completion

closes #123"

# If pre-commit hook fails, fix issues and retry - NEVER bypass
# Pre-commit hook will run automatically and must pass before commit succeeds

# 3. Push to upstream repository immediately (only after successful commit)
git push origin main

# 4. Verify push was successful
git status
# Should show "Your branch is up to date with 'origin/main'"
```

**Pre-commit Hook Compliance (CRITICAL):**
- **ALWAYS run standard `git commit`** - triggers all quality gates
- **NEVER use `git commit --no-verify`** - bypasses essential validation
- **NEVER use `git commit -n`** - short form of --no-verify, also forbidden
- **Fix issues if pre-commit fails** - don't bypass, fix the underlying problems
- **Pre-commit must pass** before commit is allowed to complete

**If Pre-commit Hook Fails:**
```bash
# DON'T do this - never bypass the hook
# git commit --no-verify -m "quick fix"  ❌ FORBIDDEN

# DO this - fix the issues properly
cargo fmt                    # Fix formatting issues
cargo clippy --fix          # Fix auto-fixable clippy issues  
cargo test                  # Ensure tests pass
# Then retry the commit
git commit -m "fix: proper commit message"  ✅ CORRECT
```

**Commit Message Requirements:**
- **Use GitHub Keywords**: `closes #123` for automatic issue closure
- **Follow Conventional Commits**: `feat:`, `fix:`, `docs:`, `refactor:`, etc.
- **Include Implementation Details**: What was built and why
- **Reference Related Issues**: Link to any discovered issues created
- **Note Verification**: Mention that verification checklist was completed

**Push Verification:**
```bash
# Verify the commit appears on GitHub
gh repo view --web
# Check that latest commit shows in repository

# Verify issue was automatically closed (if using closes #123)
gh issue view 123
# Should show status as "Closed"
```

**Never Skip Commit/Push:**
- **Always commit after verification passes** - no exceptions
- **Run standard git commit** - let pre-commit hook validate everything
- **Fix pre-commit failures properly** - don't bypass with --no-verify
- **Push immediately after successful commit** - don't leave work local
- **Verify push success** before marking issue done
- **Check automatic issue closure** worked correctly

**Pre-commit Hook Failure Handling:**
If pre-commit hook fails after verification passes, this indicates a gap in verification:
1. **Fix the pre-commit issues** (formatting, linting, tests, etc.)
2. **Update verification checklist** to catch this issue in future
3. **Re-run verification** to ensure quality is maintained
4. **Retry commit** with standard `git commit` (no --no-verify)
5. **Create process improvement issue** to prevent recurrence

## Branch and Commit Management

**Rule: Link all commits and PRs to their corresponding issues using GitHub keywords.**
Why: Automated issue tracking, clear audit trail, and automatic issue closure maintain project organization and provide development history.

**Commit Message Requirements:**
```bash
# Use GitHub keywords to link commits to issues
git commit -m "feat(auth): implement JWT validation

- Add token signing and verification
- Include expiration handling  
- Add comprehensive error types
- Add unit tests with 95% coverage

closes #123"

# For discovered issues
git commit -m "fix(auth): handle edge case in token expiration

- Fix token validation for edge case discovered in #123
- Add regression tests
- Update error handling

closes #145, related to #123"
```

**Branch Naming Convention:**
```bash
# Branch naming should reference issue number
feature/123-jwt-authentication
fix/145-token-expiration-edge-case
docs/167-api-documentation-update
```

**Pull Request Requirements:**
- **Link to Issue**: Use `closes #123` in PR description
- **Verification Results**: Include verification checklist results
- **Breaking Changes**: Document any breaking changes
- **Testing Notes**: Describe testing approach and coverage

## Workflow Compliance Verification

**Daily Workflow Checklist:**
```markdown
- [ ] Working on current milestone only (no cross-milestone work)
- [ ] Working highest priority issue within milestone
- [ ] Following Documentation-First + TDD process
- [ ] Creating issues immediately when problems discovered
- [ ] Updating issue status accurately as work progresses
- [ ] Running verification checklist before committing
- [ ] Using standard git commit (never --no-verify) to respect pre-commit hooks
- [ ] Fixing any pre-commit failures properly before retrying commit
- [ ] Committing and pushing all changes after verification passes
- [ ] Linking all commits/PRs to corresponding issues
- [ ] Marking issues done only after successful commit/push
```

**These rules ensure systematic, trackable, and complete development workflow using GitHub's project management capabilities.**