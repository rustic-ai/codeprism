name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_cache:
        description: 'Skip Rust cache (fresh build)'
        required: false
        default: false
        type: boolean
      coverage_required:
        description: 'Require coverage generation'
        required: false
        default: true
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_LOG: info

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Fast validation for PRs - essential checks only
  quick-validation:
    name: Quick Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 10
    outputs:
      should-run-full-ci: ${{ steps.changes.outputs.rust == 'true' || steps.changes.outputs.workflows == 'true' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            rust:
              - 'crates/**/*.rs'
              - 'src/**/*.rs'
              - 'Cargo.toml'
              - 'Cargo.lock'
            workflows:
              - '.github/workflows/**'
              - '.github/actions/**'
            docs:
              - '**/*.md'
              - 'codeprism-docs/**'

      - name: Setup Rust
        if: steps.changes.outputs.rust == 'true'
        uses: ./.github/actions/setup-rust
        with:
          toolchain: stable
          cache-key: quick-validation

      - name: Quick format check
        if: steps.changes.outputs.rust == 'true'
        shell: bash
        run: cargo fmt --all -- --check

      - name: Quick compilation check
        if: steps.changes.outputs.rust == 'true'
        shell: bash
        run: cargo check --all-features --workspace

  # Test matrix
  test-matrix:
    name: Test Suite
    needs: [quick-validation]
    if: always() && (needs.quick-validation.result == 'success' || needs.quick-validation.result == 'skipped')
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          # Add coverage for stable Ubuntu
          - os: ubuntu-latest
            rust: stable
            coverage: true
          # Add nightly for experimental features (allow failure)
          - os: ubuntu-latest
            rust: nightly
            experimental: true
          # Add minimum supported Rust version check
          - os: ubuntu-latest
            rust: 1.70.0
            msrv: true
        exclude:
          # Skip expensive combinations for PRs unless critical changes
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta

    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental || false }}
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust environment
        uses: ./.github/actions/setup-rust
        with:
          toolchain: ${{ matrix.rust }}
          cache-key: ${{ matrix.os }}-${{ matrix.rust }}

      - name: Run tests
        uses: ./.github/actions/run-tests
        with:
          coverage: ${{ matrix.coverage || false }}
          test-harness: false
          integration-tests: true
          doc-tests: true
          benchmarks: false
          timeout-minutes: 30

      - name: Upload coverage to Codecov
        if: matrix.coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./cobertura.xml
          flags: unittests
          name: codecov-${{ matrix.os }}-${{ matrix.rust }}
          fail_ci_if_error: false

  # Code quality gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quick-validation]
    if: always() && (needs.quick-validation.result == 'success' || needs.quick-validation.result == 'skipped')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust environment
        uses: ./.github/actions/setup-rust
        with:
          toolchain: stable
          cache-key: quality-gates

      - name: Run quality checks
        uses: ./.github/actions/quality-checks
        with:
          test-theater-check: true
          fail-fast: true

      - name: Check security vulnerabilities
        shell: bash
        run: |
          echo "=== Security Vulnerability Check ==="
          cargo audit || {
            echo "❌ Security vulnerabilities found"
            echo "Installing cargo-audit..."
            cargo install cargo-audit
            cargo audit
          }

      - name: Check for outdated dependencies
        shell: bash
        run: |
          echo "=== Outdated Dependencies Check ==="
          cargo outdated --exit-code 1 || {
            echo "Installing cargo-outdated..."
            cargo install cargo-outdated
            cargo outdated --exit-code 1
          } || echo "⚠️ Some dependencies are outdated (not failing build)"

  # YAML and configuration validation
  yaml-validation:
    name: YAML Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js for YAML validation
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install YAML validators
        shell: bash
        run: |
          npm install -g yaml-lint js-yaml ajv-cli

      - name: Validate workflow YAML files
        shell: bash
        run: |
          echo "=== Validating GitHub Workflows ==="
          find .github/workflows -name "*.yml" -exec echo "Validating: {}" \; -exec yaml-lint {} \;

      - name: Validate MCP test specifications
        shell: bash
        run: |
          echo "=== Validating MCP Test Specifications ==="
          find crates/mandrel-mcp-th/examples -name "*.yaml" -exec echo "Validating: {}" \; -exec yaml-lint {} \;

      - name: Validate test harness YAML schemas
        shell: bash
        run: |
          echo "=== Validating Test Harness Schemas ==="
          # Run the moth binary to validate YAML specifications
          if [[ -f "crates/mandrel-mcp-th/Cargo.toml" ]]; then
            cargo run --bin moth -- validate crates/mandrel-mcp-th/examples/*.yaml
          fi

  # MCP Test Harness specific validation
  mcp-validation:
    name: MCP Test Harness
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [test-matrix]
    if: contains(github.event.head_commit.message, '[mcp]') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js for MCP servers
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Rust environment
        uses: ./.github/actions/setup-rust
        with:
          toolchain: stable
          cache-key: mcp-validation

      - name: Run MCP test harness tests
        uses: ./.github/actions/run-tests
        with:
          test-harness: true
          integration-tests: true
          coverage: false
          timeout-minutes: 15

      - name: Run filesystem server validation
        shell: bash
        run: |
          echo "=== MCP Filesystem Server Validation ==="
          if [[ -f "crates/mandrel-mcp-th/examples/filesystem-server-mcp-compliant.yaml" ]]; then
            mkdir -p /tmp/mcp-test-sandbox
            echo "Test file content" > /tmp/mcp-test-sandbox/test.txt
            
            cargo run --bin moth -- run crates/mandrel-mcp-th/examples/filesystem-server-mcp-compliant.yaml \
              --output-format json \
              --max-concurrency 2 \
              --timeout 60
          fi

  # Performance regression detection
  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust environment
        uses: ./.github/actions/setup-rust
        with:
          toolchain: stable
          cache-key: performance

      - name: Run performance benchmarks
        uses: ./.github/actions/run-tests
        with:
          benchmarks: true
          coverage: false
          integration-tests: false
          doc-tests: false

      - name: Install valgrind for memory analysis
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y valgrind

      - name: Memory usage analysis
        shell: bash
        run: |
          echo "=== Memory Usage Analysis ==="
          # Run a subset of tests under valgrind
          cargo test --bin moth --release 2>&1 | head -20 || echo "Basic memory check completed"

  # Final summary job
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [quick-validation, test-matrix, quality-gates, yaml-validation, mcp-validation, performance-check]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Determine overall status
        shell: bash
        run: |
          echo "=== CI Pipeline Summary ==="
          
          # Collect job statuses
          quick_validation="${{ needs.quick-validation.result }}"
          test_matrix="${{ needs.test-matrix.result }}"
          quality_gates="${{ needs.quality-gates.result }}"
          yaml_validation="${{ needs.yaml-validation.result }}"
          mcp_validation="${{ needs.mcp-validation.result }}"
          performance_check="${{ needs.performance-check.result }}"
          
          echo "Quick Validation: $quick_validation"
          echo "Test Matrix: $test_matrix"
          echo "Quality Gates: $quality_gates"
          echo "YAML Validation: $yaml_validation"
          echo "MCP Validation: $mcp_validation"
          echo "Performance Check: $performance_check"
          
          # Determine if CI should pass
          failed_jobs=0
          [[ "$test_matrix" == "failure" ]] && ((failed_jobs++))
          [[ "$quality_gates" == "failure" ]] && ((failed_jobs++))
          [[ "$yaml_validation" == "failure" ]] && ((failed_jobs++))
          
          # MCP and performance are optional for most commits
          if [[ "$mcp_validation" == "failure" && "$mcp_validation" != "skipped" ]]; then
            echo "⚠️ MCP validation failed (may be acceptable)"
          fi
          
          if [[ $failed_jobs -gt 0 ]]; then
            echo "❌ CI failed with $failed_jobs critical job failures"
            exit 1
          else
            echo "✅ CI passed - all critical jobs successful!"
          fi

      - name: Performance summary
        if: needs.performance-check.result == 'success'
        shell: bash
        run: |
          echo "🚀 Performance benchmarks completed successfully"
          echo "Check the performance-check job for detailed results" 