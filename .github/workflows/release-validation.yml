name: MCP Test Harness - Release Validation

on:
  release:
    types: [created, published]
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type validation'
        required: false
        default: 'minor'
        type: choice
        options:
          - patch
          - minor
          - major
      comprehensive_validation:
        description: 'Run comprehensive validation suite'
        required: false
        default: 'true'
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RELEASE_MODE: true

jobs:
  # Pre-release validation
  pre-release-validation:
    name: Pre-Release Validation
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      should-proceed: ${{ steps.validation.outputs.should-proceed }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version information
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(grep '^version' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Detected version: $VERSION"

      - name: Validate release readiness
        id: validation
        run: |
          echo "Validating release readiness..."
          
          # Check for proper version format
          if [[ "${{ steps.version.outputs.version }}" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "✅ Version format is valid"
            VERSION_VALID=true
          else
            echo "❌ Invalid version format: ${{ steps.version.outputs.version }}"
            VERSION_VALID=false
          fi
          
          # Check for changelog updates (if exists)
          if [ -f "CHANGELOG.md" ]; then
            if grep -q "${{ steps.version.outputs.version }}" CHANGELOG.md; then
              echo "✅ Changelog updated for this version"
              CHANGELOG_VALID=true
            else
              echo "⚠️ Changelog may not be updated for this version"
              CHANGELOG_VALID=false
            fi
          else
            echo "ℹ️ No changelog file found"
            CHANGELOG_VALID=true
          fi
          
          # Check for unresolved TODOs in release-critical files
          TODO_COUNT=$(grep -r "TODO\|FIXME" crates/codeprism-mcp/src crates/codeprism-test-harness/src --include="*.rs" | wc -l)
          if [ $TODO_COUNT -lt 10 ]; then
            echo "✅ Acceptable number of TODOs: $TODO_COUNT"
            TODO_VALID=true
          else
            echo "⚠️ High number of TODOs: $TODO_COUNT"
            TODO_VALID=false
          fi
          
          # Overall validation
          if [ "$VERSION_VALID" = true ] && [ "$CHANGELOG_VALID" = true ] && [ "$TODO_VALID" = true ]; then
            echo "should-proceed=true" >> $GITHUB_OUTPUT
            echo "✅ Pre-release validation passed"
          else
            echo "should-proceed=false" >> $GITHUB_OUTPUT
            echo "❌ Pre-release validation failed"
          fi

  # Comprehensive release testing
  comprehensive-release-testing:
    name: Comprehensive Release Testing
    runs-on: ${{ matrix.os }}
    needs: pre-release-validation
    if: needs.pre-release-validation.outputs.should-proceed == 'true'
    timeout-minutes: 90
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust-version: [stable, beta]
        test-suite: [core, integration, performance]
        exclude:
          # Reduce matrix size for efficiency
          - os: windows-latest
            rust-version: beta
          - os: macos-latest
            test-suite: performance
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust-version }}
          components: rustfmt, clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: release-${{ matrix.os }}-${{ matrix.rust-version }}-${{ matrix.test-suite }}

      - name: Install platform dependencies
        shell: bash
        run: |
          case "${{ matrix.os }}" in
            "ubuntu-latest")
              sudo apt-get update
              sudo apt-get install -y nodejs npm python3 python3-pip
              npm install -g @modelcontextprotocol/server-filesystem@latest
              npm install -g @modelcontextprotocol/server-memory@latest
              ;;
            "macos-latest")
              brew install node npm python3
              npm install -g @modelcontextprotocol/server-filesystem@latest
              npm install -g @modelcontextprotocol/server-memory@latest
              ;;
            "windows-latest")
              choco install nodejs npm python3
              npm install -g @modelcontextprotocol/server-filesystem@latest
              npm install -g @modelcontextprotocol/server-memory@latest
              ;;
          esac

      - name: Build release binaries
        run: |
          cargo build --release --all-features
          cargo build --release -p codeprism-test-harness

      - name: Execute comprehensive test suite - ${{ matrix.test-suite }}
        shell: bash
        run: |
          case "${{ matrix.test-suite }}" in
            "core")
              echo "Running core functionality tests..."
              cargo test --release --all-features --workspace
              
              # Core test harness validation
              cd crates/codeprism-test-harness
              cargo run --release -- --config config/core-tools/repository_stats/python.yaml --validation-only
              cargo run --release -- --config config/core-tools/search_symbols/python.yaml --validation-only
              ;;
            "integration")
              echo "Running integration tests..."
              cargo test --release --test '*integration*'
              
              # Integration test harness execution
              cd crates/codeprism-test-harness
              if [ -f config/integration/workflow-edge-case-integration.yaml ]; then
                cargo run --release -- --config config/integration/workflow-edge-case-integration.yaml --validation-only
              fi
              ;;
            "performance")
              echo "Running performance validation..."
              cargo bench --bench comprehensive -- --quick
              
              # Performance test harness validation
              cd crates/codeprism-test-harness
              cargo run --release -- --config config/analysis-tools/analyze_performance/python.yaml --validation-only
              ;;
          esac

      - name: Package release artifacts
        if: matrix.os == 'ubuntu-latest' && matrix.rust-version == 'stable' && matrix.test-suite == 'core'
        run: |
          mkdir release-artifacts
          
          # Copy binaries
          cp target/release/test-harness release-artifacts/
          cp target/release/codeprism-mcp release-artifacts/
          
          # Copy test configurations
          cp -r crates/codeprism-test-harness/config release-artifacts/
          
          # Copy documentation
          cp README.md CHANGELOG.md LICENSE-* release-artifacts/
          
          # Create release package
          cd release-artifacts
          tar -czf ../mcp-test-harness-${{ needs.pre-release-validation.outputs.version }}-linux.tar.gz .
          cd ..

      - name: Upload release artifacts
        if: matrix.os == 'ubuntu-latest' && matrix.rust-version == 'stable' && matrix.test-suite == 'core'
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-linux
          path: |
            mcp-test-harness-${{ needs.pre-release-validation.outputs.version }}-linux.tar.gz
            release-artifacts/
          retention-days: 30

  # Security and compliance validation
  security-compliance-validation:
    name: Security & Compliance Validation
    runs-on: ubuntu-latest
    needs: pre-release-validation
    if: needs.pre-release-validation.outputs.should-proceed == 'true'
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: security-validation-${{ runner.os }}

      - name: Install security tools
        run: |
          # Install cargo audit for vulnerability scanning
          cargo install cargo-audit cargo-deny
          
          # Install additional security tools
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install safety bandit

      - name: Run cargo audit
        run: |
          echo "Running cargo audit for vulnerability scanning..."
          cargo audit --format json > audit-report.json || true
          
          # Generate human-readable report
          echo "# Security Audit Report" > security-report.md
          echo "" >> security-report.md
          echo "**Version:** ${{ needs.pre-release-validation.outputs.version }}" >> security-report.md
          echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> security-report.md
          echo "" >> security-report.md
          
          if cargo audit --format json | jq '.vulnerabilities | length' | grep -q "0"; then
            echo "✅ No known vulnerabilities detected" >> security-report.md
          else
            echo "⚠️ Vulnerabilities detected - see audit-report.json for details" >> security-report.md
          fi

      - name: Run cargo deny
        run: |
          echo "Running cargo deny for license and security compliance..."
          cargo deny check --format json > deny-report.json || true
          
          echo "" >> security-report.md
          echo "## License Compliance" >> security-report.md
          echo "" >> security-report.md
          
          if cargo deny check licenses 2>&1 | grep -q "error"; then
            echo "⚠️ License compliance issues detected" >> security-report.md
          else
            echo "✅ All dependencies have compatible licenses" >> security-report.md
          fi

      - name: Enhanced security analysis
        run: |
          echo "" >> security-report.md
          echo "## Code Security Analysis" >> security-report.md
          echo "" >> security-report.md
          
          # Check for common security anti-patterns
          UNSAFE_COUNT=$(grep -r "unsafe" crates/ --include="*.rs" | wc -l)
          PANIC_COUNT=$(grep -r "panic!\|unwrap()\|expect(" crates/ --include="*.rs" | wc -l)
          
          echo "- **Unsafe blocks:** $UNSAFE_COUNT" >> security-report.md
          echo "- **Potential panics:** $PANIC_COUNT" >> security-report.md
          
          if [ $UNSAFE_COUNT -lt 5 ] && [ $PANIC_COUNT -lt 20 ]; then
            echo "- **Security assessment:** ✅ Low risk" >> security-report.md
          else
            echo "- **Security assessment:** ⚠️ Requires review" >> security-report.md
          fi

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-compliance-reports
          path: |
            audit-report.json
            deny-report.json
            security-report.md
          retention-days: 90

  # Documentation and API validation
  documentation-validation:
    name: Documentation & API Validation
    runs-on: ubuntu-latest
    needs: pre-release-validation
    if: needs.pre-release-validation.outputs.should-proceed == 'true'
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Node.js for documentation
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build documentation
        run: |
          echo "Building Rust documentation..."
          cargo doc --all-features --no-deps
          
          echo "Building Docusaurus documentation..."
          cd codeprism-docs
          npm ci
          npm run build

      - name: Validate API documentation
        run: |
          echo "# Documentation Validation Report" > docs-validation-report.md
          echo "" >> docs-validation-report.md
          
          # Check documentation coverage
          DOC_COVERAGE=$(cargo doc --all-features 2>&1 | grep -o '[0-9]*% documented' | head -1 || echo "0% documented")
          echo "- **Documentation Coverage:** $DOC_COVERAGE" >> docs-validation-report.md
          
          # Check for missing docs
          MISSING_DOCS=$(cargo rustdoc --all-features -- -D missing-docs 2>&1 | grep "warning" | wc -l)
          echo "- **Missing Documentation Warnings:** $MISSING_DOCS" >> docs-validation-report.md
          
          # Validate examples compile
          echo "- **Example Validation:** " >> docs-validation-report.md
          if cargo test --doc --all-features; then
            echo "✅ All examples compile and run" >> docs-validation-report.md
          else
            echo "❌ Some examples failed" >> docs-validation-report.md
          fi

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: release-documentation
          path: |
            target/doc/
            codeprism-docs/build/
            docs-validation-report.md
          retention-days: 30

  # Generate release report
  generate-release-report:
    name: Generate Release Report
    runs-on: ubuntu-latest
    needs: [pre-release-validation, comprehensive-release-testing, security-compliance-validation, documentation-validation]
    if: always() && needs.pre-release-validation.outputs.should-proceed == 'true'
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate comprehensive release report
        run: |
          echo "# 🚀 MCP Test Harness Release Validation Report" > release-report.md
          echo "" >> release-report.md
          echo "**Version:** ${{ needs.pre-release-validation.outputs.version }}" >> release-report.md
          echo "**Release Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> release-report.md
          echo "**Validation Status:** " >> release-report.md
          
          # Determine overall status
          OVERALL_SUCCESS=true
          
          # Pre-release validation
          if [ "${{ needs.pre-release-validation.result }}" = "success" ]; then
            echo "✅ **Pre-Release Validation**: Passed" >> release-report.md
          else
            echo "❌ **Pre-Release Validation**: Failed" >> release-report.md
            OVERALL_SUCCESS=false
          fi
          
          # Comprehensive testing
          if [ "${{ needs.comprehensive-release-testing.result }}" = "success" ]; then
            echo "✅ **Comprehensive Testing**: All platforms and test suites passed" >> release-report.md
          else
            echo "❌ **Comprehensive Testing**: Some tests failed" >> release-report.md
            OVERALL_SUCCESS=false
          fi
          
          # Security validation
          if [ "${{ needs.security-compliance-validation.result }}" = "success" ]; then
            echo "✅ **Security & Compliance**: Validation passed" >> release-report.md
          else
            echo "❌ **Security & Compliance**: Issues detected" >> release-report.md
            OVERALL_SUCCESS=false
          fi
          
          # Documentation validation
          if [ "${{ needs.documentation-validation.result }}" = "success" ]; then
            echo "✅ **Documentation**: Validation passed" >> release-report.md
          else
            echo "❌ **Documentation**: Issues detected" >> release-report.md
            OVERALL_SUCCESS=false
          fi
          
          echo "" >> release-report.md
          
          if [ "$OVERALL_SUCCESS" = true ]; then
            echo "## 🎉 Release Ready" >> release-report.md
            echo "" >> release-report.md
            echo "All validation checks have passed. This release is ready for deployment." >> release-report.md
          else
            echo "## ⚠️ Release Issues Detected" >> release-report.md
            echo "" >> release-report.md
            echo "Some validation checks have failed. Please review the issues before proceeding with the release." >> release-report.md
          fi
          
          echo "" >> release-report.md
          echo "## 📊 Validation Summary" >> release-report.md
          echo "" >> release-report.md
          
          # Include security report if available
          if [ -f artifacts/security-compliance-reports/security-report.md ]; then
            echo "### Security Analysis" >> release-report.md
            cat artifacts/security-compliance-reports/security-report.md >> release-report.md
            echo "" >> release-report.md
          fi
          
          # Include documentation report if available
          if [ -f artifacts/release-documentation/docs-validation-report.md ]; then
            echo "### Documentation Analysis" >> release-report.md
            cat artifacts/release-documentation/docs-validation-report.md >> release-report.md
            echo "" >> release-report.md
          fi
          
          echo "---" >> release-report.md
          echo "*Generated by MCP Test Harness Release Validation Pipeline*" >> release-report.md
          
          # Set output for conditional steps
          echo "RELEASE_READY=$OVERALL_SUCCESS" >> $GITHUB_ENV

      - name: Upload release report
        uses: actions/upload-artifact@v4
        with:
          name: release-validation-report
          path: release-report.md
          retention-days: 365

      - name: Create release validation issue
        if: env.RELEASE_READY == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportContent = fs.readFileSync('release-report.md', 'utf8');
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Release Validation Failed - Version ${{ needs.pre-release-validation.outputs.version }}`,
              body: `# Release Validation Issues
              
              Release validation has detected issues that need to be addressed before deployment.
              
              ${reportContent}
              
              Please resolve these issues and re-run the validation.`,
              labels: ['release', 'validation-failed', 'priority-high']
            });

      - name: Update release with validation report
        if: github.event_name == 'release' && env.RELEASE_READY == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportContent = fs.readFileSync('release-report.md', 'utf8');
            
            // Get the release
            const release = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            // Update release with validation report
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              body: `${release.data.body}\n\n---\n\n${reportContent}`
            });
