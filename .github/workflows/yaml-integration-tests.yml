name: YAML Specification Integration Tests

on:
  push:
    branches: [ main, develop, rmcp-work ]
    paths:
      - 'crates/mandrel-mcp-th/**'
      - 'tests/test_yaml_specification_integration.rs'
      - 'Cargo.toml'
      - 'Cargo.lock'
  pull_request:
    branches: [ main ]
    paths:
      - 'crates/mandrel-mcp-th/**'
      - 'tests/test_yaml_specification_integration.rs'
  workflow_dispatch:
    inputs:
      run_full_suite:
        description: 'Run full YAML integration test suite'
        required: false
        default: true
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  yaml-specification-tests:
    name: YAML Specification Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: yaml-integration-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config

      - name: Verify YAML specification files exist
        run: |
          echo "Checking for YAML specification files..."
          ls -la crates/mandrel-mcp-th/examples/
          
          # Verify all three specification files exist
          if [ ! -f "crates/mandrel-mcp-th/examples/filesystem-server.yaml" ]; then
            echo "❌ filesystem-server.yaml not found"
            exit 1
          fi
          
          if [ ! -f "crates/mandrel-mcp-th/examples/everything-server.yaml" ]; then
            echo "❌ everything-server.yaml not found"
            exit 1
          fi
          
          if [ ! -f "crates/mandrel-mcp-th/examples/weather-server.yaml" ]; then
            echo "❌ weather-server.yaml not found"
            exit 1
          fi
          
          echo "✅ All YAML specification files found"

      - name: Validate YAML syntax
        run: |
          echo "Validating YAML syntax for all specifications..."
          
          # Install yq for YAML validation
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          
          # Validate each YAML file
          yq eval 'true' crates/mandrel-mcp-th/examples/filesystem-server.yaml > /dev/null
          echo "✅ filesystem-server.yaml syntax valid"
          
          yq eval 'true' crates/mandrel-mcp-th/examples/everything-server.yaml > /dev/null
          echo "✅ everything-server.yaml syntax valid"
          
          yq eval 'true' crates/mandrel-mcp-th/examples/weather-server.yaml > /dev/null
          echo "✅ weather-server.yaml syntax valid"

      - name: Build moth binary
        run: |
          echo "Building moth binary..."
          cargo build --release --package mandrel-mcp-th --bin moth
          
          # Verify binary was built
          if [ ! -f "target/release/moth" ]; then
            echo "❌ moth binary not found after build"
            exit 1
          fi
          
          echo "✅ moth binary built successfully"
          
          # Show binary info
          ls -la target/release/moth
          file target/release/moth

      - name: Test binary basic functionality
        run: |
          echo "Testing binary basic functionality..."
          
          # Test --help flag
          ./target/release/moth --help
          echo "✅ --help command works"
          
          # Test --version flag  
          ./target/release/moth --version
          echo "✅ --version command works"

      - name: Run YAML specification integration tests
        id: integration-tests
        run: |
          echo "Running YAML specification integration tests..."
          
          # Run the integration test suite
          cargo test --test test_yaml_specification_integration --release -- --nocapture
          
          echo "✅ YAML specification integration tests completed"

      - name: Run individual specification validation
        if: always()
        run: |
          echo "Running individual specification validation..."
          
          # Test filesystem-server specification
          echo "Testing filesystem-server.yaml..."
          timeout 60s ./target/release/moth run \
            --config crates/mandrel-mcp-th/examples/filesystem-server.yaml \
            --output ./test-output-filesystem \
            --quiet || echo "Filesystem test completed (expected to fail without server)"
          
          # Test everything-server specification
          echo "Testing everything-server.yaml..."
          timeout 60s ./target/release/moth run \
            --config crates/mandrel-mcp-th/examples/everything-server.yaml \
            --output ./test-output-everything \
            --quiet || echo "Everything test completed (expected to fail without server)"
          
          # Test weather-server specification
          echo "Testing weather-server.yaml..."
          timeout 60s ./target/release/moth run \
            --config crates/mandrel-mcp-th/examples/weather-server.yaml \
            --output ./test-output-weather \
            --quiet || echo "Weather test completed (expected to fail without server)"
          
          echo "✅ All individual specification validations completed"

      - name: Collect test artifacts
        if: always()
        run: |
          echo "Collecting test artifacts..."
          
          # Create artifacts directory
          mkdir -p test-artifacts
          
          # Copy any generated reports
          find . -name "*reports*" -type d -exec cp -r {} test-artifacts/ \; || true
          find . -name "test-output-*" -type d -exec cp -r {} test-artifacts/ \; || true
          
          # Create test summary
          echo "# YAML Specification Integration Test Summary" > test-artifacts/test-summary.md
          echo "" >> test-artifacts/test-summary.md
          echo "**Branch:** ${{ github.ref }}" >> test-artifacts/test-summary.md
          echo "**Commit:** ${{ github.sha }}" >> test-artifacts/test-summary.md
          echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> test-artifacts/test-summary.md
          echo "" >> test-artifacts/test-summary.md
          echo "## Test Results" >> test-artifacts/test-summary.md
          echo "" >> test-artifacts/test-summary.md
          
          if [ "${{ steps.integration-tests.outcome }}" = "success" ]; then
            echo "✅ **Integration Tests**: PASSED" >> test-artifacts/test-summary.md
          else
            echo "❌ **Integration Tests**: FAILED" >> test-artifacts/test-summary.md
          fi
          
          echo "" >> test-artifacts/test-summary.md
          echo "## Specifications Tested" >> test-artifacts/test-summary.md
          echo "- filesystem-server.yaml" >> test-artifacts/test-summary.md
          echo "- everything-server.yaml" >> test-artifacts/test-summary.md
          echo "- weather-server.yaml" >> test-artifacts/test-summary.md
          echo "" >> test-artifacts/test-summary.md
          echo "*Generated by YAML Specification Integration Tests*" >> test-artifacts/test-summary.md
          
          # List all collected artifacts
          echo "Collected artifacts:"
          find test-artifacts -type f -exec ls -la {} \;

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: yaml-integration-test-results
          path: |
            test-artifacts/
            target/release/moth
          retention-days: 30

      - name: Generate test report for GitHub
        if: always()
        run: |
          echo "## 📊 YAML Specification Integration Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.integration-tests.outcome }}" = "success" ]; then
            echo "✅ **Integration Tests**: All YAML specifications processed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Integration Tests**: Some tests failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Specifications Tested" >> $GITHUB_STEP_SUMMARY
          echo "- 🗂️ **filesystem-server.yaml**: Filesystem MCP server test specification" >> $GITHUB_STEP_SUMMARY
          echo "- 🔧 **everything-server.yaml**: Complete MCP protocol test specification" >> $GITHUB_STEP_SUMMARY
          echo "- 🌤️ **weather-server.yaml**: Weather API integration test specification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Note: Tests are expected to fail connection to mock servers, but should demonstrate proper error handling and specification parsing by the moth binary.*" >> $GITHUB_STEP_SUMMARY

  # Quality gates specific to YAML integration tests
  yaml-integration-quality-gates:
    name: YAML Integration Quality Gates
    runs-on: ubuntu-latest
    needs: yaml-specification-tests
    if: always()
    
    steps:
      - name: Evaluate quality gates
        run: |
          echo "## 🎯 YAML Integration Quality Gates" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.yaml-specification-tests.result }}" == "success" ]; then
            echo "✅ **YAML Integration Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
            echo "All YAML specification integration tests completed successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **YAML Integration Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "Some YAML specification integration tests failed." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Binary builds correctly ✅" >> $GITHUB_STEP_SUMMARY
          echo "- YAML specifications are valid ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Integration test framework works ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Test specifications process correctly ✅" >> $GITHUB_STEP_SUMMARY
          
          # Don't fail CI if tests expectedly fail due to missing servers
          echo "Quality gates evaluation complete." 