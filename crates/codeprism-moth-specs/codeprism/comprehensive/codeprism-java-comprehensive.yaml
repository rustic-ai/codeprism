# CodePrism MCP Server - Java Comprehensive Language-Specific Test Specification
# Comprehensive testing for Java projects covering 18 applicable MCP tools
# with Java-focused scenarios, JVM ecosystem analysis, and enterprise patterns
# following the MCP 2025-06-18 specification

name: "CodePrism Java Comprehensive Analysis"
version: "1.0.0"
description: "Comprehensive test specification for Java projects using CodePrism MCP server"

# Server capabilities declaration
capabilities:
  tools: true           # Core navigation and analysis tools
  resources: false      # No file URI resources  
  prompts: false        # No prompt templates
  sampling: false       # No sampling support
  logging: true         # Error and operation logging

# Server startup configuration  
server:
  command: "cargo"
  args: ["run", "--package", "codeprism-mcp-server", "--bin", "codeprism", "--", "--mcp"]
  env:
    RUST_LOG: "info"
    MCP_PROTOCOL_VERSION: "2025-06-18"
  transport: "stdio"
  startup_timeout_seconds: 30
  shutdown_timeout_seconds: 10

# Java-focused comprehensive tool testing
tools:
  # ========================================================================
  # CORE NAVIGATION - Essential tools for Java project exploration
  # ========================================================================
  - name: "get_repository_info"
    description: "Java repository statistics with Maven/Gradle analysis"
    tests:
      - name: "java_enterprise_repository_overview"
        description: "Analyze Java enterprise repository structure"
        input: {}
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"repository_overview\":\\s*\\{"
        performance:
          max_duration_ms: 3200
          max_memory_mb: 60
        tags: ["java", "enterprise", "maven"]

  - name: "trace_path"
    description: "Trace execution paths in Java with inheritance analysis"
    tests:
      - name: "java_polymorphic_flow_tracing"
        description: "Trace Java execution paths with polymorphism analysis"
        input:
          source: "abcdef123456"
          target: "fedcba654321"
          max_depth: 8
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"path_found\":\\s*(true|false)"
        performance:
          max_duration_ms: 3800
          max_memory_mb: 68
        tags: ["java", "polymorphism", "inheritance"]

  - name: "explain_symbol"
    description: "Explain Java symbols with generics and annotations"
    tests:
      - name: "java_generic_explanation"
        description: "Explain Java generics with type bounds and wildcards"
        input:
          symbol_id: "abcdef123456"
          include_dependencies: true
          include_usages: true
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"symbol\":\\s*\\{"
        performance:
          max_duration_ms: 2800
          max_memory_mb: 52
        tags: ["java", "generics", "annotations"]

  # ========================================================================
  # SEARCH & DISCOVERY - Java-specific search capabilities
  # ========================================================================
  - name: "search_symbols"
    description: "Java symbol search with interface and annotation filtering"
    tests:
      - name: "java_annotation_interface_search"
        description: "Search for Java annotations and interface definitions"
        input:
          pattern: "Override"
          symbol_types: ["annotation", "interface"]
          limit: 20
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"symbols\":\\s*\\["
        performance:
          max_duration_ms: 3000
          max_memory_mb: 56
        tags: ["java", "annotations", "interfaces"]

  - name: "search_content"
    description: "Java content search with pattern matching for generics and lambda"
    tests:
      - name: "java_lambda_generic_pattern_search"
        description: "Search for lambda expressions and generic patterns in Java"
        input:
          query: "->"
          file_types: ["java"]
          regex: true
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"matches\":\\s*\\["
        performance:
          max_duration_ms: 2800
          max_memory_mb: 50
        tags: ["java", "lambda", "generics"]

  # ========================================================================
  # COMPLEXITY ANALYSIS - Java complexity with enterprise considerations
  # ========================================================================
  - name: "analyze_complexity"
    description: "Java complexity analysis with enterprise pattern complexity"
    tests:
      - name: "java_enterprise_complexity_analysis"
        description: "Analyze Java complexity including enterprise patterns"
        input:
          target: "test-projects/java-test-project/src/main/java/Main.java"
          metrics: ["cyclomatic", "cognitive"]
          threshold_warnings: true
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"complexity_metrics\":\\s*\\{"
        performance:
          max_duration_ms: 4200
          max_memory_mb: 76
        tags: ["java", "complexity", "enterprise"]

  # ========================================================================
  # DEPENDENCY ANALYSIS - Java dependency management
  # ========================================================================
  - name: "find_dependencies"
    description: "Java dependency analysis with Maven/Gradle ecosystem focus"
    tests:
      - name: "java_maven_dependency_analysis"
        description: "Analyze Maven dependencies and artifact resolution"
        input:
          target: "abcdef123456"
          dependency_type: "direct"
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"dependencies\":\\s*\\["
        performance:
          max_duration_ms: 3800
          max_memory_mb: 66
        tags: ["java", "maven", "dependencies"]

  - name: "find_references"
    description: "Find references to Java symbols"
    tests:
      - name: "java_symbol_references"
        description: "Find references to Java symbols with context"
        input:
          symbol_id: "abcdef123456"
          include_definitions: true
          context_lines: 5
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"references\":\\s*\\["
        performance:
          max_duration_ms: 3200
          max_memory_mb: 58
        tags: ["java", "references", "context"]

  # ========================================================================
  # WORKFLOW TOOLS - Guidance and optimization
  # ========================================================================
  - name: "provide_guidance"
    description: "Java-specific guidance and recommendations"
    tests:
      - name: "java_guidance_analysis"
        description: "Provide Java-specific guidance for code quality"
        input:
          target: "test-projects/java-test-project/src/main/java/Main.java"
          guidance_type: "performance"
          include_examples: true
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"guidance\""
        performance:
          max_duration_ms: 3500
          max_memory_mb: 62
        tags: ["java", "guidance", "performance"]

  - name: "optimize_code"
    description: "Java code optimization suggestions"
    tests:
      - name: "java_optimization_suggestions"
        description: "Analyze Java code for optimization opportunities"
        input:
          target: "test-projects/java-test-project/src/main/java/Main.java"
          optimization_types: ["performance", "maintainability"]
          aggressive_mode: false
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"optimizations\":\\s*\\["
        performance:
          max_duration_ms: 4500
          max_memory_mb: 80
        tags: ["java", "optimization", "performance"]

  - name: "batch_process"
    description: "Batch processing for multiple Java files"
    tests:
      - name: "java_batch_analysis"
        description: "Batch process multiple Java files for analysis"
        input:
          operation: "analyze_complexity"
          targets: ["test-projects/java-test-project/src/main/java/Main.java", "test-projects/java-test-project/src/main/java/Service.java"]
          max_concurrent: 2
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"batch_results\":\\s*\\["
        performance:
          max_duration_ms: 5200
          max_memory_mb: 86
        tags: ["java", "batch", "analysis"]

  - name: "workflow_automation"
    description: "Automated Java development workflows"
    tests:
      - name: "java_workflow_automation"
        description: "Automate Java code quality workflows"
        input:
          workflow_type: "quality_check"
          target_scope: "test-projects/java-test-project"
          automation_level: "full"
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"automation_result\":\\s*\\{"
        performance:
          max_duration_ms: 10000
          max_memory_mb: 128
        tags: ["java", "automation", "workflow"]

# Error handling test cases for comprehensive coverage
error_tests:
  - name: "invalid_symbol_id"
    description: "Test error handling for invalid symbol IDs"
    tool: "explain_symbol"
    input:
      symbol_id: "invalid_hex"
    expected:
      error: true
      error_message_contains: "not found"

  - name: "missing_file_target"
    description: "Test error handling for missing file targets"
    tool: "analyze_complexity"
    input:
      target: "nonexistent/file.java"
    expected:
      error: true
      error_message_contains: "not found"

  - name: "invalid_dependency_type"
    description: "Test error handling for invalid dependency types"
    tool: "find_dependencies"
    input:
      target: "abcdef123456"
      dependency_type: "invalid_type"
    expected:
      error: true
      error_message_contains: "Invalid"

  - name: "invalid_search_pattern"
    description: "Test error handling for invalid search patterns"
    tool: "search_symbols"
    input:
      pattern: ""
    expected:
      error: true
      error_message_contains: "pattern"

  - name: "invalid_path_parameters"
    description: "Test error handling for invalid path tracing parameters"
    tool: "trace_path"
    input:
      source: "invalid_hex"
      target: "also_invalid"
    expected:
      error: true
      error_message_contains: "not found"

  - name: "invalid_batch_operation"
    description: "Test error handling for invalid batch operations"
    tool: "batch_process"
    input:
      operation: "invalid_operation"
      targets: ["test.java"]
    expected:
      error: true
      error_message_contains: "Invalid" 