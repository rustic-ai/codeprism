# CodePrism MCP Server - Python Comprehensive Language-Specific Test Specification
# Comprehensive testing for Python projects covering 18 applicable MCP tools
# with Python-focused scenarios, dynamic typing analysis, and ecosystem analysis
# following the MCP 2025-06-18 specification

name: "CodePrism Python Comprehensive Analysis"
version: "1.0.0"
description: "Comprehensive test specification for Python projects using CodePrism MCP server"

# Server capabilities declaration
capabilities:
  tools: true           # Core navigation and analysis tools
  resources: false      # No file URI resources  
  prompts: false        # No prompt templates
  sampling: false       # No sampling support
  logging: true         # Error and operation logging

# Server startup configuration  
server:
  command: "cargo"
  args: ["run", "--package", "codeprism-mcp-server", "--bin", "codeprism", "--", "--mcp"]
  env:
    RUST_LOG: "info"
    MCP_PROTOCOL_VERSION: "2025-06-18"
  transport: "stdio"
  startup_timeout_seconds: 30
  shutdown_timeout_seconds: 10

# Python-focused comprehensive tool testing
tools:
  # ========================================================================
  # CORE NAVIGATION - Essential tools for Python project exploration
  # ========================================================================
  - name: "get_repository_info"
    description: "Python repository statistics with package analysis"
    tests:
      - name: "python_package_repository_overview"
        description: "Analyze Python package repository structure"
        input: {}
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"repository_overview\":\\s*\\{"
        performance:
          max_duration_ms: 3200
          max_memory_mb: 60
        tags: ["python", "package", "pip"]

  - name: "trace_path"
    description: "Trace execution paths in Python with import analysis"
    tests:
      - name: "python_import_flow_tracing"
        description: "Trace Python execution paths with import dependencies"
        input:
          source: "abcdef123456"
          target: "fedcba654321"
          max_depth: 8
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"path_found\":\\s*(true|false)"
        performance:
          max_duration_ms: 3800
          max_memory_mb: 68
        tags: ["python", "imports", "execution"]

  - name: "explain_symbol"
    description: "Explain Python symbols with type hints and decorators"
    tests:
      - name: "python_decorator_explanation"
        description: "Explain Python decorators and type annotations"
        input:
          symbol_id: "abcdef123456"
          include_dependencies: true
          include_usages: true
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"symbol\":\\s*\\{"
        performance:
          max_duration_ms: 2800
          max_memory_mb: 52
        tags: ["python", "decorators", "types"]

  # ========================================================================
  # SEARCH & DISCOVERY - Python-specific search capabilities
  # ========================================================================
  - name: "search_symbols"
    description: "Python symbol search with class and function filtering"
    tests:
      - name: "python_class_method_search"
        description: "Search for Python classes and method definitions"
        input:
          pattern: "__init__"
          symbol_types: ["function", "class"]
          limit: 20
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"symbols\":\\s*\\["
        performance:
          max_duration_ms: 3000
          max_memory_mb: 56
        tags: ["python", "classes", "methods"]

  - name: "search_content"
    description: "Python content search with pattern matching for imports and async"
    tests:
      - name: "python_import_async_pattern_search"
        description: "Search for import statements and async patterns in Python"
        input:
          query: "import"
          file_types: ["py"]
          regex: true
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"matches\":\\s*\\["
        performance:
          max_duration_ms: 2800
          max_memory_mb: 50
        tags: ["python", "imports", "async"]

  # ========================================================================
  # COMPLEXITY ANALYSIS - Python complexity with dynamic typing considerations
  # ========================================================================
  - name: "analyze_complexity"
    description: "Python complexity analysis with type hint analysis"
    tests:
      - name: "python_typing_complexity_analysis"
        description: "Analyze Python complexity including typing patterns"
        input:
          target: "test-projects/python-sample/main.py"
          metrics: ["cyclomatic", "cognitive"]
          threshold_warnings: true
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"complexity_metrics\":\\s*\\{"
        performance:
          max_duration_ms: 4200
          max_memory_mb: 76
        tags: ["python", "complexity", "typing"]

  # ========================================================================
  # DEPENDENCY ANALYSIS - Python dependency management
  # ========================================================================
  - name: "find_dependencies"
    description: "Python dependency analysis with pip ecosystem focus"
    tests:
      - name: "python_pip_dependency_analysis"
        description: "Analyze pip dependencies and requirements"
        input:
          target: "abcdef123456"
          dependency_type: "direct"
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"dependencies\":\\s*\\["
        performance:
          max_duration_ms: 3800
          max_memory_mb: 66
        tags: ["python", "pip", "dependencies"]

  - name: "find_references"
    description: "Find references to Python symbols"
    tests:
      - name: "python_symbol_references"
        description: "Find references to Python symbols with context"
        input:
          symbol_id: "abcdef123456"
          include_definitions: true
          context_lines: 5
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"references\":\\s*\\["
        performance:
          max_duration_ms: 3200
          max_memory_mb: 58
        tags: ["python", "references", "context"]

  # ========================================================================
  # WORKFLOW TOOLS - Guidance and optimization
  # ========================================================================
  - name: "provide_guidance"
    description: "Python-specific guidance and recommendations"
    tests:
      - name: "python_guidance_analysis"
        description: "Provide Python-specific guidance for code quality"
        input:
          target: "test-projects/python-sample/main.py"
          guidance_type: "performance"
          include_examples: true
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"guidance\""
        performance:
          max_duration_ms: 3500
          max_memory_mb: 62
        tags: ["python", "guidance", "performance"]

  - name: "optimize_code"
    description: "Python code optimization suggestions"
    tests:
      - name: "python_optimization_suggestions"
        description: "Analyze Python code for optimization opportunities"
        input:
          target: "test-projects/python-sample/main.py"
          optimization_types: ["performance", "maintainability"]
          aggressive_mode: false
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"optimizations\":\\s*\\["
        performance:
          max_duration_ms: 4500
          max_memory_mb: 80
        tags: ["python", "optimization", "performance"]

  - name: "batch_process"
    description: "Batch processing for multiple Python files"
    tests:
      - name: "python_batch_analysis"
        description: "Batch process multiple Python files for analysis"
        input:
          operation: "analyze_complexity"
          targets: ["test-projects/python-sample/main.py", "test-projects/python-sample/core/engine.py"]
          max_concurrent: 2
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"batch_results\":\\s*\\["
        performance:
          max_duration_ms: 5200
          max_memory_mb: 86
        tags: ["python", "batch", "analysis"]

  - name: "workflow_automation"
    description: "Automated Python development workflows"
    tests:
      - name: "python_workflow_automation"
        description: "Automate Python code quality workflows"
        input:
          workflow_type: "quality_check"
          target_scope: "test-projects/python-sample"
          automation_level: "full"
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"automation_result\":\\s*\\{"
        performance:
          max_duration_ms: 10000
          max_memory_mb: 128
        tags: ["python", "automation", "workflow"]

# Error handling test cases for comprehensive coverage
error_tests:
  - name: "invalid_symbol_id"
    description: "Test error handling for invalid symbol IDs"
    tool: "explain_symbol"
    input:
      symbol_id: "invalid_hex"
    expected:
      error: true
      error_message_contains: "not found"

  - name: "missing_file_target"
    description: "Test error handling for missing file targets"
    tool: "analyze_complexity"
    input:
      target: "nonexistent/file.py"
    expected:
      error: true
      error_message_contains: "not found"

  - name: "invalid_dependency_type"
    description: "Test error handling for invalid dependency types"
    tool: "find_dependencies"
    input:
      target: "abcdef123456"
      dependency_type: "invalid_type"
    expected:
      error: true
      error_message_contains: "Invalid"

  - name: "invalid_search_pattern"
    description: "Test error handling for invalid search patterns"
    tool: "search_symbols"
    input:
      pattern: ""
    expected:
      error: true
      error_message_contains: "pattern"

  - name: "invalid_path_parameters"
    description: "Test error handling for invalid path tracing parameters"
    tool: "trace_path"
    input:
      source: "invalid_hex"
      target: "also_invalid"
    expected:
      error: true
      error_message_contains: "not found"

  - name: "invalid_batch_operation"
    description: "Test error handling for invalid batch operations"
    tool: "batch_process"
    input:
      operation: "invalid_operation"
      targets: ["test.py"]
    expected:
      error: true
      error_message_contains: "Invalid" 