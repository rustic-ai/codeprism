# CodePrism MCP Server - Complexity Analysis Tools Test Specification
# Comprehensive testing for code complexity analysis tools
# following the MCP 2025-06-18 specification

name: "CodePrism Complexity Analysis Tools"
version: "1.0.0"
description: "Test specification for CodePrism MCP server complexity analysis tools"

# Server capabilities declaration
capabilities:
  tools: true           # Complexity analysis tools
  resources: false      # No file URI resources  
  prompts: false        # No prompt templates
  sampling: false       # No sampling support
  logging: true         # Error and operation logging

# Server startup configuration  
server:
  command: "cargo"
  args: ["run", "--package", "codeprism-mcp-server", "--bin", "codeprism", "--", "--mcp"]
  env:
    RUST_LOG: "info"
    MCP_PROTOCOL_VERSION: "2025-06-18"
  transport: "stdio"
  startup_timeout_seconds: 30
  shutdown_timeout_seconds: 10

# Complexity analysis tools testing
tools:
  # ========================================================================
  # ANALYZE_COMPLEXITY Tool - Code complexity analysis
  # ========================================================================
  - name: "analyze_complexity"
    description: "Analyze code complexity metrics"
    tests:
      - name: "analyze_complexity_basic"
        description: "Basic complexity analysis with file target"
        input:
          target: "test-projects/python-sample/core/user_manager.py"
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"target\":\\s*\"test-projects/python-sample/core/user_manager.py\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"complexity_metrics\":\\s*\\{"
        performance:
          max_duration_ms: 4000
          max_memory_mb: 72
        tags: ["complexity", "basic", "file"]

      - name: "analyze_complexity_with_metrics"
        description: "Complexity analysis with specific metrics"
        input:
          target: "test-projects/rust-test-project/src/main.rs"
          metrics: ["cyclomatic", "cognitive"]
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"complexity_metrics\":\\s*\\{"
        performance:
          max_duration_ms: 4000
          max_memory_mb: 72
        tags: ["complexity", "metrics", "rust"]

      - name: "analyze_complexity_all_metrics"
        description: "Complexity analysis with all metrics"
        input:
          target: "test-projects/java-test-project/src/main/java/Main.java"
          metrics: ["all"]
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"complexity_metrics\":\\s*\\{"
        performance:
          max_duration_ms: 4000
          max_memory_mb: 72
        tags: ["complexity", "all", "java"]

      - name: "analyze_complexity_with_warnings"
        description: "Complexity analysis with threshold warnings enabled"
        input:
          target: "test-projects/js-dependency-test-project/src/index.js"
          threshold_warnings: true
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"complexity_metrics\":\\s*\\{"
        performance:
          max_duration_ms: 4000
          max_memory_mb: 72
        tags: ["complexity", "warnings", "javascript"]

      - name: "analyze_complexity_no_warnings"
        description: "Complexity analysis with warnings disabled"
        input:
          target: "test-projects/python-sample/main.py"
          threshold_warnings: false
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"complexity_metrics\":\\s*\\{"
        performance:
          max_duration_ms: 4000
          max_memory_mb: 72
        tags: ["complexity", "no_warnings", "python"]

      - name: "analyze_complexity_specific_metrics"
        description: "Complexity analysis with specific metric types"
        input:
          target: "test-projects/rust-test-project/src/lib.rs"
          metrics: ["cyclomatic", "maintainability"]
          threshold_warnings: true
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"complexity_metrics\":\\s*\\{"
        performance:
          max_duration_ms: 4000
          max_memory_mb: 72
        tags: ["complexity", "specific", "rust"]

      - name: "analyze_complexity_pattern_target"
        description: "Complexity analysis with glob pattern target"
        input:
          target: "test-projects/python-sample/**/*.py"
          metrics: ["cyclomatic"]
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
        performance:
          max_duration_ms: 6000
          max_memory_mb: 96
        tags: ["complexity", "pattern", "python"]

      - name: "analyze_complexity_nonexistent_file"
        description: "Handle non-existent file gracefully"
        input:
          target: "test-projects/nonexistent/file.py"
        expected:
          error: true
          error_message_contains: "not found"
        tags: ["complexity", "error", "nonexistent"]

      - name: "analyze_complexity_directory_target"
        description: "Complexity analysis with directory target"
        input:
          target: "test-projects/java-test-project/src/"
          metrics: ["all"]
          threshold_warnings: true
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
        performance:
          max_duration_ms: 8000
          max_memory_mb: 128
        tags: ["complexity", "directory", "java"]

      - name: "analyze_complexity_empty_metrics"
        description: "Complexity analysis with empty metrics array"
        input:
          target: "test-projects/python-sample/main.py"
          metrics: []
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
        performance:
          max_duration_ms: 4000
          max_memory_mb: 72
        tags: ["complexity", "empty_metrics", "python"]

# Test configuration
test_config:
  timeout_seconds: 120
  max_concurrency: 2
  fail_fast: false
  retry:
    max_retries: 2
    retry_delay_ms: 1000
    exponential_backoff: true

# Metadata for complexity analysis testing
metadata:
  author: "CodePrism MCP Test Harness Team"
  documentation: "https://spec.modelcontextprotocol.io/"
  license: "MIT"
  tags: ["complexity", "analysis", "quality", "metrics", "multi-language"]
  test_coverage:
    tools: 1
    scenarios: 10
    languages: ["python", "rust", "java", "javascript"]
    capabilities: ["complexity_analysis", "quality_metrics", "threshold_warnings", "pattern_matching"]
  
  # Performance benchmarks for complexity tools
  benchmarks:
    analyze_complexity_time_ms: 4000
    analyze_complexity_pattern_time_ms: 6000
    analyze_complexity_directory_time_ms: 8000
  
  # Quality targets
  quality_targets:
    success_rate_percent: 95
    complexity_accuracy_percent: 90
    performance_test_coverage_percent: 100
    multi_language_support_percent: 95 