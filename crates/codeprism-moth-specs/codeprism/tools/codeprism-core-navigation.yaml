# CodePrism MCP Server - Core Navigation Tools Test Specification
# Comprehensive testing for core navigation and code analysis tools
# following the MCP 2025-06-18 specification

name: "CodePrism Core Navigation Tools"
version: "1.0.0"
description: "Test specification for CodePrism MCP server core navigation and analysis tools"

# Server capabilities declaration
capabilities:
  tools: true           # Core navigation tools
  resources: false      # No file URI resources  
  prompts: false        # No prompt templates
  sampling: false       # No sampling support
  logging: true         # Error and operation logging

# Server startup configuration  
server:
  command: "cargo"
  args: ["run", "--package", "codeprism-mcp-server", "--bin", "codeprism"]
  env:
    RUST_LOG: "info"
    MCP_PROTOCOL_VERSION: "2025-06-18"
  transport: "stdio"
  startup_timeout_seconds: 30
  shutdown_timeout_seconds: 10

# Core navigation tools testing
tools:
  # ========================================================================
  # GET_REPOSITORY_INFO Tool - Repository analysis and statistics
  # ========================================================================
  - name: "get_repository_info"
    description: "Get repository information and statistics"
    tests:
      - name: "get_repository_info_basic"
        description: "Get basic repository information"
        input: {}
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
        performance:
          max_duration_ms: 5000
          max_memory_mb: 128
        tags: ["repository", "info", "basic"]

  # ========================================================================
  # TRACE_PATH Tool - Path tracing between code symbols
  # ========================================================================
  - name: "trace_path"
    description: "Find execution paths between code symbols"
    tests:
      - name: "trace_path_basic"
        description: "Find path between two symbols with hex IDs"
        input:
          source: "abcdef123456"
          target: "fedcba654321"
          max_depth: 5
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"path_found\":\\s*(true|false)"
        performance:
          max_duration_ms: 3000
          max_memory_mb: 64
        tags: ["trace", "path", "basic"]

      - name: "trace_path_no_max_depth"
        description: "Find path without specifying max depth (uses default)"
        input:
          source: "abcdef123456"
          target: "fedcba654321"
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"path_found\":\\s*(true|false)"
        performance:
          max_duration_ms: 3000
          max_memory_mb: 64
        tags: ["trace", "path", "defaults"]

      - name: "trace_path_invalid_source"
        description: "Handle invalid source ID format"
        input:
          source: "invalid_hex"
          target: "fedcba654321"
        expected:
          error: true
          error_message_contains: "Invalid source symbol ID format"
        tags: ["trace", "path", "error"]

      - name: "trace_path_invalid_target"
        description: "Handle invalid target ID format"
        input:
          source: "abcdef123456"
          target: "invalid_hex"
        expected:
          error: true
          error_message_contains: "Invalid target symbol ID format"
        tags: ["trace", "path", "error"]

  # ========================================================================
  # FIND_DEPENDENCIES Tool - Dependency analysis
  # ========================================================================
  - name: "find_dependencies"
    description: "Find and analyze code dependencies"
    tests:
      - name: "find_dependencies_basic"
        description: "Find dependencies with default type"
        input:
          target: "abcdef123456"
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"target_symbol_id\":\\s*\"abcdef123456\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"dependencies\":\\s*\\["
        performance:
          max_duration_ms: 4000
          max_memory_mb: 72
        tags: ["dependencies", "basic"]

      - name: "find_dependencies_direct"
        description: "Find direct dependencies"
        input:
          target: "abcdef123456"
          dependency_type: "direct"
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"dependencies\":\\s*\\["
        performance:
          max_duration_ms: 4000
          max_memory_mb: 72
        tags: ["dependencies", "direct"]

      - name: "find_dependencies_calls"
        description: "Find call dependencies"
        input:
          target: "abcdef123456"
          dependency_type: "calls"
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"dependencies\":\\s*\\["
        performance:
          max_duration_ms: 4000
          max_memory_mb: 72
        tags: ["dependencies", "calls"]

      - name: "find_dependencies_imports"
        description: "Find import dependencies"
        input:
          target: "abcdef123456"
          dependency_type: "imports"
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"dependencies\":\\s*\\["
        performance:
          max_duration_ms: 4000
          max_memory_mb: 72
        tags: ["dependencies", "imports"]

      - name: "find_dependencies_invalid_type"
        description: "Handle invalid dependency type"
        input:
          target: "abcdef123456"
          dependency_type: "invalid_type"
        expected:
          error: true
          error_message_contains: "Invalid dependency type"
        tags: ["dependencies", "error"]

      - name: "find_dependencies_invalid_target"
        description: "Handle invalid target ID format"
        input:
          target: "invalid_hex"
        expected:
          error: true
          error_message_contains: "Invalid target symbol ID format"
        tags: ["dependencies", "error"]

  # ========================================================================
  # FIND_REFERENCES Tool - Reference finding
  # ========================================================================
  - name: "find_references"
    description: "Find all references to code symbols"
    tests:
      - name: "find_references_basic"
        description: "Find references with default parameters"
        input:
          symbol_id: "abcdef123456"
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"symbol_id\":\\s*\"abcdef123456\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"references\":\\s*\\["
        performance:
          max_duration_ms: 2000
          max_memory_mb: 48
        tags: ["references", "basic"]

      - name: "find_references_with_definitions"
        description: "Find references including definitions"
        input:
          symbol_id: "abcdef123456"
          include_definitions: true
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"references\":\\s*\\["
        performance:
          max_duration_ms: 2000
          max_memory_mb: 48
        tags: ["references", "definitions"]

      - name: "find_references_with_context"
        description: "Find references with context lines"
        input:
          symbol_id: "abcdef123456"
          context_lines: 5
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"references\":\\s*\\["
        performance:
          max_duration_ms: 2000
          max_memory_mb: 48
        tags: ["references", "context"]

      - name: "find_references_invalid_symbol"
        description: "Handle invalid symbol ID format"
        input:
          symbol_id: "invalid_hex"
        expected:
          error: true
          error_message_contains: "Invalid symbol ID format"
        tags: ["references", "error"]

  # ========================================================================
  # EXPLAIN_SYMBOL Tool - Detailed symbol explanations
  # ========================================================================
  - name: "explain_symbol"
    description: "Provide detailed explanations of code symbols"
    tests:
      - name: "explain_symbol_basic"
        description: "Explain symbol with default parameters"
        input:
          symbol_id: "abcdef123456"
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"symbol\":\\s*\\{"
        performance:
          max_duration_ms: 2000
          max_memory_mb: 32
        tags: ["explain", "basic"]

      - name: "explain_symbol_with_dependencies"
        description: "Explain symbol including dependencies"
        input:
          symbol_id: "abcdef123456"
          include_dependencies: true
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"symbol\":\\s*\\{"
        performance:
          max_duration_ms: 2000
          max_memory_mb: 32
        tags: ["explain", "dependencies"]

      - name: "explain_symbol_with_usages"
        description: "Explain symbol including usages"
        input:
          symbol_id: "abcdef123456"
          include_usages: true
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"symbol\":\\s*\\{"
        performance:
          max_duration_ms: 2000
          max_memory_mb: 32
        tags: ["explain", "usages"]

      - name: "explain_symbol_with_context"
        description: "Explain symbol with context lines"
        input:
          symbol_id: "abcdef123456"
          context_lines: 10
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"symbol\":\\s*\\{"
        performance:
          max_duration_ms: 2000
          max_memory_mb: 32
        tags: ["explain", "context"]

      - name: "explain_symbol_invalid_id"
        description: "Handle invalid symbol ID format"
        input:
          symbol_id: "invalid_hex"
        expected:
          error: true
          error_message_contains: "Invalid symbol ID format"
        tags: ["explain", "error"]

  # ========================================================================
  # SEARCH_SYMBOLS Tool - Symbol search
  # ========================================================================
  - name: "search_symbols"
    description: "Search for symbols by pattern"
    tests:
      - name: "search_symbols_basic"
        description: "Search symbols with basic pattern"
        input:
          pattern: "get_user"
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"pattern\":\\s*\"get_user\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"symbols\":\\s*\\["
        performance:
          max_duration_ms: 3000
          max_memory_mb: 64
        tags: ["search", "basic"]

      - name: "search_symbols_with_types"
        description: "Search symbols filtered by types"
        input:
          pattern: "user"
          symbol_types: ["function", "class"]
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"symbols\":\\s*\\["
        performance:
          max_duration_ms: 3000
          max_memory_mb: 64
        tags: ["search", "types"]

      - name: "search_symbols_with_limit"
        description: "Search symbols with result limit"
        input:
          pattern: "test"
          limit: 10
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"symbols\":\\s*\\["
        performance:
          max_duration_ms: 3000
          max_memory_mb: 64
        tags: ["search", "limit"]

      - name: "search_symbols_with_context"
        description: "Search symbols with context lines"
        input:
          pattern: "main"
          context_lines: 5
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"symbols\":\\s*\\["
        performance:
          max_duration_ms: 3000
          max_memory_mb: 64
        tags: ["search", "context"]

      - name: "search_symbols_invalid_type"
        description: "Handle invalid symbol type"
        input:
          pattern: "test"
          symbol_types: ["invalid_type"]
        expected:
          error: true
          error_message_contains: "Invalid symbol type"
        tags: ["search", "error"]

# Test configuration
test_config:
  timeout_seconds: 60
  max_concurrency: 3
  fail_fast: false
  retry:
    max_retries: 2
    retry_delay_ms: 1000
    exponential_backoff: true

# Test metadata
metadata:
  author: "CodePrism MCP Test Harness Team"
  documentation: "https://spec.modelcontextprotocol.io/"
  license: "MIT"
  tags: ["core", "navigation", "analysis", "multi-language"]
  test_coverage:
    tools: 6
    scenarios: 26
    languages: ["python", "rust", "java", "javascript"]
    capabilities: ["path_tracing", "dependency_analysis", "symbol_explanation", "reference_finding", "symbol_search", "repository_info"]
  
  # Performance benchmarks for core navigation tools
  benchmarks:
    get_repository_info_time_ms: 5000
    trace_path_time_ms: 3000
    find_dependencies_time_ms: 4000
    find_references_time_ms: 2000
    explain_symbol_time_ms: 2000
    search_symbols_time_ms: 3000
  
  # Quality targets
  quality_targets:
    success_rate_percent: 95
    path_finding_accuracy_percent: 85
    dependency_analysis_completeness_percent: 90
    reference_finding_accuracy_percent: 92
    symbol_explanation_quality_percent: 88
    performance_test_coverage_percent: 100 