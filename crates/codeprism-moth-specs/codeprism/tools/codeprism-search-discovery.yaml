# CodePrism MCP Server - Search and Discovery Tools Test Specification
# Comprehensive testing for search, discovery, and content analysis tools
# following the MCP 2025-06-18 specification

name: "CodePrism Search and Discovery Tools"
version: "1.0.0"
description: "Test specification for CodePrism MCP server search and content analysis tools"

# Server capabilities declaration
capabilities:
  tools: true           # Search and discovery tools
  resources: false      # No file URI resources  
  prompts: false        # No prompt templates
  sampling: false       # No sampling support
  logging: true         # Error and operation logging

# Server startup configuration  
server:
  command: "cargo"
  args: ["run", "--package", "codeprism-mcp-server", "--bin", "codeprism-mcp-server"]
  env:
    RUST_LOG: "info"
    MCP_PROTOCOL_VERSION: "2025-06-18"
  transport: "stdio"
  startup_timeout_seconds: 30
  shutdown_timeout_seconds: 10

# Search and discovery tools testing
tools:
  # ========================================================================
  # SEARCH_SYMBOLS Tool - Symbol search across codebases
  # ========================================================================
  - name: "search_symbols"
    description: "Search for symbols by pattern"
    tests:
      - name: "search_symbols_basic"
        description: "Basic symbol search with pattern"
        input:
          pattern: "get_user"
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"pattern\":\\s*\"get_user\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"symbols\":\\s*\\["
        performance:
          max_duration_ms: 3000
          max_memory_mb: 64
        tags: ["search", "symbols", "basic"]

      - name: "search_symbols_with_types"
        description: "Search symbols filtered by types"
        input:
          pattern: "user"
          symbol_types: ["function", "class"]
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"symbols\":\\s*\\["
        performance:
          max_duration_ms: 3000
          max_memory_mb: 64
        tags: ["search", "symbols", "types"]

      - name: "search_symbols_with_inheritance_filters"
        description: "Search symbols with inheritance filters"
        input:
          pattern: "base"
          inheritance_filters: ["extends", "implements"]
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"symbols\":\\s*\\["
        performance:
          max_duration_ms: 3000
          max_memory_mb: 64
        tags: ["search", "symbols", "inheritance"]

      - name: "search_symbols_with_limit"
        description: "Search symbols with result limit"
        input:
          pattern: "test"
          limit: 10
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"symbols\":\\s*\\["
        performance:
          max_duration_ms: 3000
          max_memory_mb: 64
        tags: ["search", "symbols", "limit"]

      - name: "search_symbols_with_context"
        description: "Search symbols with context lines"
        input:
          pattern: "main"
          context_lines: 5
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"symbols\":\\s*\\["
        performance:
          max_duration_ms: 3000
          max_memory_mb: 64
        tags: ["search", "symbols", "context"]

      - name: "search_symbols_all_options"
        description: "Search symbols with all options"
        input:
          pattern: "user"
          symbol_types: ["function", "class", "variable"]
          inheritance_filters: ["extends"]
          limit: 20
          context_lines: 3
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"symbols\":\\s*\\["
        performance:
          max_duration_ms: 3000
          max_memory_mb: 64
        tags: ["search", "symbols", "comprehensive"]

      - name: "search_symbols_invalid_type"
        description: "Handle invalid symbol type"
        input:
          pattern: "test"
          symbol_types: ["invalid_type"]
        expected:
          error: true
          error_message_contains: "Invalid symbol type"
        tags: ["search", "symbols", "error"]

  # ========================================================================
  # SEARCH_CONTENT Tool - Content search with filtering
  # ========================================================================
  - name: "search_content"
    description: "Search file contents with context and filtering options"
    tests:
      - name: "search_content_basic"
        description: "Basic content search"
        input:
          query: "import"
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"query\":\\s*\"import\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"matches\":\\s*\\["
        performance:
          max_duration_ms: 2500
          max_memory_mb: 48
        tags: ["search", "content", "basic"]

      - name: "search_content_with_file_types"
        description: "Search content filtered by file types"
        input:
          query: "function"
          file_types: ["py", "js"]
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"matches\":\\s*\\["
        performance:
          max_duration_ms: 2500
          max_memory_mb: 48
        tags: ["search", "content", "file_types"]

      - name: "search_content_case_sensitive"
        description: "Case sensitive content search"
        input:
          query: "Class"
          case_sensitive: true
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"matches\":\\s*\\["
        performance:
          max_duration_ms: 2500
          max_memory_mb: 48
        tags: ["search", "content", "case_sensitive"]

      - name: "search_content_case_insensitive"
        description: "Case insensitive content search"
        input:
          query: "class"
          case_sensitive: false
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"matches\":\\s*\\["
        performance:
          max_duration_ms: 2500
          max_memory_mb: 48
        tags: ["search", "content", "case_insensitive"]

      - name: "search_content_regex"
        description: "Regex content search"
        input:
          query: "def\\s+\\w+"
          regex: true
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"matches\":\\s*\\["
        performance:
          max_duration_ms: 2500
          max_memory_mb: 48
        tags: ["search", "content", "regex"]

      - name: "search_content_with_limit"
        description: "Content search with result limit"
        input:
          query: "test"
          limit: 10
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"matches\":\\s*\\["
        performance:
          max_duration_ms: 2500
          max_memory_mb: 48
        tags: ["search", "content", "limit"]

      - name: "search_content_all_options"
        description: "Content search with all options"
        input:
          query: "class\\s+\\w+"
          file_types: ["py", "java"]
          case_sensitive: false
          regex: true
          limit: 25
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"matches\":\\s*\\["
        performance:
          max_duration_ms: 2500
          max_memory_mb: 48
        tags: ["search", "content", "comprehensive"]

      - name: "search_content_no_matches"
        description: "Handle search with no matches"
        input:
          query: "nonexistent_unique_string_12345"
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"matches\":\\s*\\[\\s*\\]"
        tags: ["search", "content", "no_matches"]

# Test configuration
test_config:
  timeout_seconds: 60
  max_concurrency: 3
  fail_fast: false
  retry:
    max_retries: 2
    retry_delay_ms: 1000
    exponential_backoff: true

# Metadata for search and discovery testing
metadata:
  author: "CodePrism MCP Test Harness Team"
  documentation: "https://spec.modelcontextprotocol.io/"
  license: "MIT"
  tags: ["search", "discovery", "content", "analysis", "multi-language"]
  test_coverage:
    tools: 2
    scenarios: 16
    languages: ["python", "rust", "java", "javascript"]
    capabilities: ["symbol_search", "content_search", "pattern_matching", "filtering"]
  
  # Performance benchmarks for search tools
  benchmarks:
    search_symbols_time_ms: 3000
    search_content_time_ms: 2500
    search_comprehensive_time_ms: 4000
  
  # Quality targets
  quality_targets:
    success_rate_percent: 95
    search_accuracy_percent: 90
    performance_test_coverage_percent: 100
    cross_language_support_percent: 90 