# CodePrism MCP Server - Workflow Orchestration Tools Test Specification
# Comprehensive testing for workflow orchestration tools including guidance,
# optimization, batch processing, and workflow automation

name: "CodePrism Workflow Orchestration Tools"
version: "1.0.0"
description: "Test specification for CodePrism MCP server workflow orchestration tools"

# Server capabilities declaration
capabilities:
  tools: true           # Workflow orchestration tools
  resources: false      # No file URI resources  
  prompts: false        # No prompt templates
  sampling: false       # No sampling support
  logging: true         # Error and operation logging

# Server startup configuration  
server:
  command: "cargo"
  args: ["run", "--package", "codeprism-mcp-server", "--bin", "codeprism-mcp-server"]
  env:
    RUST_LOG: "info"
    MCP_PROTOCOL_VERSION: "2025-06-18"
  transport: "stdio"
  startup_timeout_seconds: 30
  shutdown_timeout_seconds: 10

# Workflow orchestration tools testing
tools:
  # ========================================================================
  # PROVIDE_GUIDANCE Tool - Provide development guidance and recommendations
  # ========================================================================
  - name: "provide_guidance"
    description: "Provide development guidance and recommendations"
    tests:
      - name: "provide_guidance_basic"
        description: "Basic guidance for a file"
        input:
          target: "test-projects/python-sample/main.py"
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"guidance\""
        performance:
          max_duration_ms: 3000
          max_memory_mb: 48
        tags: ["guidance", "basic"]

      - name: "provide_guidance_complexity"
        description: "Provide complexity guidance"
        input:
          target: "test-projects/rust-test-project/src/main.rs"
          guidance_type: "complexity"
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"guidance\""
        performance:
          max_duration_ms: 3000
          max_memory_mb: 48
        tags: ["guidance", "complexity"]

      - name: "provide_guidance_performance"
        description: "Provide performance guidance"
        input:
          target: "test-projects/java-test-project/src/main/java/Main.java"
          guidance_type: "performance"
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"guidance\""
        performance:
          max_duration_ms: 3000
          max_memory_mb: 48
        tags: ["guidance", "performance"]

      - name: "provide_guidance_security"
        description: "Provide security guidance"
        input:
          target: "test-projects/js-dependency-test-project/src/index.js"
          guidance_type: "security"
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"guidance\""
        performance:
          max_duration_ms: 3000
          max_memory_mb: 48
        tags: ["guidance", "security"]

      - name: "provide_guidance_with_examples"
        description: "Provide guidance with examples"
        input:
          target: "test-projects/python-sample/core/user_manager.py"
          guidance_type: "complexity"
          include_examples: true
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"guidance\""
        performance:
          max_duration_ms: 3000
          max_memory_mb: 48
        tags: ["guidance", "examples"]

      - name: "provide_guidance_priority_high"
        description: "Provide high priority guidance"
        input:
          target: "test-projects/rust-test-project/src/lib.rs"
          guidance_type: "performance"
          priority_level: "high"
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"guidance\""
        performance:
          max_duration_ms: 3000
          max_memory_mb: 48
        tags: ["guidance", "priority", "high"]

  # ========================================================================
  # OPTIMIZE_CODE Tool - Provide code optimization suggestions
  # ========================================================================
  - name: "optimize_code"
    description: "Provide code optimization suggestions"
    tests:
      - name: "optimize_code_basic"
        description: "Basic code optimization"
        input:
          target: "test-projects/python-sample/main.py"
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"optimizations\":\\s*\\["
        performance:
          max_duration_ms: 4000
          max_memory_mb: 64
        tags: ["optimization", "basic"]

      - name: "optimize_code_performance"
        description: "Performance-focused code optimization"
        input:
          target: "test-projects/rust-test-project/src/main.rs"
          optimization_types: ["performance"]
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"optimizations\":\\s*\\["
        performance:
          max_duration_ms: 4000
          max_memory_mb: 64
        tags: ["optimization", "performance"]

      - name: "optimize_code_maintainability"
        description: "Maintainability-focused code optimization"
        input:
          target: "test-projects/java-test-project/src/main/java/Main.java"
          optimization_types: ["maintainability"]
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"optimizations\":\\s*\\["
        performance:
          max_duration_ms: 4000
          max_memory_mb: 64
        tags: ["optimization", "maintainability"]

      - name: "optimize_code_multiple_types"
        description: "Multiple optimization types"
        input:
          target: "test-projects/js-dependency-test-project/src/index.js"
          optimization_types: ["performance", "maintainability"]
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"optimizations\":\\s*\\["
        performance:
          max_duration_ms: 4000
          max_memory_mb: 64
        tags: ["optimization", "multiple"]

      - name: "optimize_code_aggressive"
        description: "Aggressive optimization mode"
        input:
          target: "test-projects/python-sample/core/user_manager.py"
          optimization_types: ["performance"]
          aggressive_mode: true
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"optimizations\":\\s*\\["
        performance:
          max_duration_ms: 4000
          max_memory_mb: 64
        tags: ["optimization", "aggressive"]

      - name: "optimize_code_limited_suggestions"
        description: "Limited number of optimization suggestions"
        input:
          target: "test-projects/rust-test-project/src/lib.rs"
          optimization_types: ["performance", "maintainability"]
          max_suggestions: 5
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"optimizations\":\\s*\\["
        performance:
          max_duration_ms: 4000
          max_memory_mb: 64
        tags: ["optimization", "limited"]

  # ========================================================================
  # BATCH_PROCESS Tool - Execute multiple operations in batch
  # ========================================================================
  - name: "batch_process"
    description: "Execute multiple operations in batch"
    tests:
      - name: "batch_process_analyze_complexity"
        description: "Batch process complexity analysis"
        input:
          operation: "analyze_complexity"
          targets: ["test-projects/python-sample/main.py", "test-projects/python-sample/core/user_manager.py"]
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"batch_results\":\\s*\\["
        performance:
          max_duration_ms: 8000
          max_memory_mb: 96
        tags: ["batch", "complexity"]

      - name: "batch_process_with_concurrency"
        description: "Batch process with concurrency control"
        input:
          operation: "analyze_complexity"
          targets: ["test-projects/rust-test-project/src/main.rs", "test-projects/rust-test-project/src/lib.rs"]
          max_concurrent: 2
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"batch_results\":\\s*\\["
        performance:
          max_duration_ms: 8000
          max_memory_mb: 96
        tags: ["batch", "concurrency"]

      - name: "batch_process_with_parameters"
        description: "Batch process with custom parameters"
        input:
          operation: "analyze_complexity"
          targets: ["test-projects/java-test-project/src/main/java/Main.java"]
          parameters: {"metrics": ["cyclomatic"], "threshold_warnings": true}
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"batch_results\":\\s*\\["
        performance:
          max_duration_ms: 8000
          max_memory_mb: 96
        tags: ["batch", "parameters"]

      - name: "batch_process_fail_fast"
        description: "Batch process with fail fast mode"
        input:
          operation: "analyze_complexity"
          targets: ["test-projects/python-sample/main.py", "test-projects/nonexistent/file.py"]
          fail_fast: true
        expected:
          error: true
          error_message_contains: "not found"
        tags: ["batch", "fail_fast", "error"]

      - name: "batch_process_continue_on_error"
        description: "Batch process continuing on errors"
        input:
          operation: "analyze_complexity"
          targets: ["test-projects/python-sample/main.py", "test-projects/nonexistent/file.py"]
          fail_fast: false
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"batch_results\":\\s*\\["
        performance:
          max_duration_ms: 8000
          max_memory_mb: 96
        tags: ["batch", "continue_on_error"]

  # ========================================================================
  # WORKFLOW_AUTOMATION Tool - Automate development workflows
  # ========================================================================
  - name: "workflow_automation"
    description: "Automate common development workflows"
    tests:
      - name: "workflow_automation_basic"
        description: "Basic workflow automation"
        input:
          workflow_type: "quality_check"
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"automation_result\":\\s*\\{"
        performance:
          max_duration_ms: 5000
          max_memory_mb: 72
        tags: ["automation", "basic"]

      - name: "workflow_automation_with_scope"
        description: "Workflow automation with target scope"
        input:
          workflow_type: "quality_check"
          target_scope: "test-projects/python-sample"
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"automation_result\":\\s*\\{"
        performance:
          max_duration_ms: 5000
          max_memory_mb: 72
        tags: ["automation", "scope"]

      - name: "workflow_automation_comprehensive"
        description: "Comprehensive workflow automation"
        input:
          workflow_type: "comprehensive_analysis"
          target_scope: "test-projects/rust-test-project"
          automation_level: "full"
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"automation_result\":\\s*\\{"
        performance:
          max_duration_ms: 10000
          max_memory_mb: 128
        tags: ["automation", "comprehensive"]

      - name: "workflow_automation_dry_run"
        description: "Workflow automation dry run"
        input:
          workflow_type: "quality_check"
          target_scope: "test-projects/java-test-project"
          dry_run: true
        expected:
          error: false
          fields:
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"status\":\\s*\"success\""
            - path: "$.content[0].text"
              field_type: "string"
              required: true
              pattern: "\"automation_result\":\\s*\\{"
        performance:
          max_duration_ms: 5000
          max_memory_mb: 72
        tags: ["automation", "dry_run"]

# Test configuration
test_config:
  timeout_seconds: 120
  max_concurrency: 2
  fail_fast: false
  retry:
    max_retries: 2
    retry_delay_ms: 1000
    exponential_backoff: true

# Metadata for workflow orchestration testing
metadata:
  author: "CodePrism MCP Test Harness Team"
  documentation: "https://spec.modelcontextprotocol.io/"
  license: "MIT"
  tags: ["workflow", "orchestration", "batch", "optimization", "automation"]
  test_coverage:
    tools: 4
    scenarios: 19
    languages: ["python", "rust", "java", "javascript"]
    capabilities: ["guidance", "optimization", "batch_processing", "workflow_automation"]
  
  # Performance benchmarks for workflow orchestration tools
  benchmarks:
    provide_guidance_time_ms: 3000
    optimize_code_time_ms: 4000
    batch_process_time_ms: 8000
    workflow_automation_time_ms: 5000
  
  # Quality targets
  quality_targets:
    success_rate_percent: 95
    guidance_quality_percent: 88
    optimization_effectiveness_percent: 85
    batch_processing_reliability_percent: 92
    automation_accuracy_percent: 90 