# Performance Analysis Tool - Python Test Configuration
# Tests the analyze_performance MCP tool for identifying performance issues and bottlenecks

global:
  max_global_concurrency: 2
  timeout_seconds: 45
  fail_fast: false
  default_project_path: "test-projects/python-sample"

# Performance monitoring for performance analysis
performance:
  enable_monitoring: true
  baseline_storage_path: "baselines/analysis-tools/"
  regression_detection:
    warning_threshold_percent: 35.0
    error_threshold_percent: 80.0

test_suites:
  - name: "Performance Analysis - Python Core Functionality"
    description: "Test performance issue detection and optimization suggestions"
    test_cases:
      # Basic performance analysis
      - id: "python_perf_basic_analysis"
        tool_name: "analyze_performance"
        description: "Basic performance analysis for Python project"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          analysis_type: "comprehensive"
          include_complexity: true
          include_memory_usage: true
          include_bottlenecks: true
          optimization_suggestions: true
          performance_threshold: "medium"
        expected:
          patterns:
            - key: "result.performance_issues"
              validation:
                type: "array"
              required: true
            - key: "result.optimization_suggestions"
              validation:
                type: "array"
              required: true
            - key: "result.complexity_analysis"
              validation:
                type: "exists"
              required: false
          performance_requirements:
            max_execution_time_ms: 10000
            max_memory_usage_mb: 96

      # Loop optimization detection
      - id: "python_perf_loop_analysis"
        tool_name: "analyze_performance"
        description: "Detect inefficient loops and iterations"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          analysis_type: "loops"
          detect_nested_loops: true
          detect_inefficient_iterations: true
          suggest_vectorization: true
        expected:
          patterns:
            - key: "result.loop_inefficiencies"
              validation:
                type: "array"
              required: true
            - key: "result.vectorization_opportunities"
              validation:
                type: "exists"
              required: false

      # Memory usage analysis
      - id: "python_perf_memory_analysis"
        tool_name: "analyze_performance"
        description: "Analyze memory usage patterns and leaks"
        enabled: true
        project_path: "test-projects/dependency-test-project"
        input_params:
          analysis_type: "memory"
          detect_memory_leaks: true
          analyze_object_creation: true
          suggest_memory_optimization: true
        expected:
          patterns:
            - key: "result.memory_issues"
              validation:
                type: "array"
              required: true
            - key: "result.memory_optimization_suggestions"
              validation:
                type: "array"
              required: false

# Performance baselines
baselines:
  python_perf_basic_analysis:
    average_execution_time_ms: 6000.0
    peak_memory_mb: 80.0
    throughput_ops_per_sec: 0.167
  python_perf_loop_analysis:
    average_execution_time_ms: 4000.0
    peak_memory_mb: 64.0
    throughput_ops_per_sec: 0.25
  python_perf_memory_analysis:
    average_execution_time_ms: 8000.0
    peak_memory_mb: 96.0
    throughput_ops_per_sec: 0.125
