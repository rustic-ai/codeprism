# Security Analysis Tool - Python Test Configuration
# Tests the analyze_security MCP tool with OWASP/CWE validation patterns

global:
  max_global_concurrency: 2
  timeout_seconds: 60
  fail_fast: false
  default_project_path: "test-projects/python-sample"

# Performance monitoring for security analysis
performance:
  enable_monitoring: true
  baseline_storage_path: "baselines/analysis-tools/"
  regression_detection:
    warning_threshold_percent: 30.0
    error_threshold_percent: 70.0

test_suites:
  - name: "Security Analysis - Python Core Functionality"
    description: "Test security vulnerability detection with OWASP mapping"
    test_cases:
      # Basic security scan
      - id: "python_security_basic_scan"
        tool_name: "analyze_security"
        description: "Basic security vulnerability scan for Python project"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          scan_type: "comprehensive"
          include_dependencies: true
          severity_threshold: "low"
          frameworks: ["flask", "django", "fastapi"]
          rule_sets: ["owasp-top10", "cwe-top25", "python-security"]
        expected:
          patterns:
            - key: "result.vulnerabilities"
              validation:
                type: "array"
              required: true
            - key: "result.scan_summary"
              validation:
                type: "exists"
              required: true
            - key: "result.owasp_categories"
              validation:
                type: "exists"
              required: false
          performance_requirements:
            max_execution_time_ms: 15000
            max_memory_usage_mb: 128
          custom_scripts:
            - name: "validate_security_findings"
              language: "python"
              script: |
                def validate(response):
                    result = response.get('result', {})
                    vulnerabilities = result.get('vulnerabilities', [])
                    scan_summary = result.get('scan_summary', {})
                    
                    # Validate scan summary structure
                    required_summary_fields = ['total_files_scanned', 'scan_duration', 'rules_applied']
                    summary_score = 0.0
                    
                    for field in required_summary_fields:
                        if field in scan_summary:
                            summary_score += 1.0 / len(required_summary_fields)
                    
                    # Validate vulnerability structure if any found
                    vuln_quality_score = 1.0  # Default high score if no vulns
                    if vulnerabilities:
                        valid_vulns = 0
                        for vuln in vulnerabilities:
                            required_fields = ['severity', 'category', 'file', 'line']
                            if all(field in vuln for field in required_fields):
                                valid_vulns += 1
                                
                                # Bonus points for OWASP/CWE mapping
                                if 'owasp_category' in vuln or 'cwe_id' in vuln:
                                    valid_vulns += 0.5
                        
                        vuln_quality_score = min(1.0, valid_vulns / len(vulnerabilities))
                    
                    total_score = (summary_score * 0.4) + (vuln_quality_score * 0.6)
                    
                    if len(vulnerabilities) > 0:
                        return True, total_score, f"Security scan: {len(vulnerabilities)} vulnerabilities found, quality score: {vuln_quality_score:.2f}"
                    else:
                        return True, total_score, f"Security scan completed, no vulnerabilities found (quality score: {total_score:.2f})"

      # OWASP Top 10 specific testing
      - id: "python_security_owasp_validation"
        tool_name: "analyze_security"
        description: "Validate OWASP Top 10 vulnerability detection"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          scan_type: "owasp-top10"
          include_owasp_mapping: true
          include_cwe_mapping: true
          severity_threshold: "medium"
          detailed_analysis: true
        expected:
          patterns:
            - key: "result.owasp_categories"
              validation:
                type: "exists"
              required: true
            - key: "result.vulnerabilities"
              validation:
                type: "array"
              required: true
          custom_scripts:
            - name: "validate_owasp_mapping"
              language: "python"
              script: |
                def validate(response):
                    result = response.get('result', {})
                    vulnerabilities = result.get('vulnerabilities', [])
                    owasp_categories = result.get('owasp_categories', {})
                    
                    # OWASP Top 10 2021 categories
                    valid_owasp_categories = [
                        'A01:2021-Broken Access Control',
                        'A02:2021-Cryptographic Failures', 
                        'A03:2021-Injection',
                        'A04:2021-Insecure Design',
                        'A05:2021-Security Misconfiguration',
                        'A06:2021-Vulnerable and Outdated Components',
                        'A07:2021-Identification and Authentication Failures',
                        'A08:2021-Software and Data Integrity Failures',
                        'A09:2021-Security Logging and Monitoring Failures',
                        'A10:2021-Server-Side Request Forgery'
                    ]
                    
                    # Validate OWASP category structure
                    owasp_score = 0.0
                    if owasp_categories:
                        for category, count in owasp_categories.items():
                            if any(valid_cat in category for valid_cat in valid_owasp_categories):
                                owasp_score += 0.1
                    
                    # Validate individual vulnerability OWASP mapping
                    mapped_vulns = 0
                    cwe_mapped_vulns = 0
                    
                    for vuln in vulnerabilities:
                        if 'owasp_category' in vuln:
                            mapped_vulns += 1
                        if 'cwe_id' in vuln:
                            cwe_mapped_vulns += 1
                    
                    mapping_score = 0.0
                    if vulnerabilities:
                        owasp_mapping_ratio = mapped_vulns / len(vulnerabilities)
                        cwe_mapping_ratio = cwe_mapped_vulns / len(vulnerabilities)
                        mapping_score = (owasp_mapping_ratio * 0.6) + (cwe_mapping_ratio * 0.4)
                    else:
                        mapping_score = 0.8  # High score if no vulns to map
                    
                    total_score = (owasp_score * 0.3) + (mapping_score * 0.7)
                    
                    return True, total_score, f"OWASP validation: {mapped_vulns}/{len(vulnerabilities)} OWASP mapped, {cwe_mapped_vulns}/{len(vulnerabilities)} CWE mapped"

      # Dependency vulnerability scanning
      - id: "python_security_dependency_scan"
        tool_name: "analyze_security"
        description: "Scan for known vulnerabilities in dependencies"
        enabled: true
        project_path: "test-projects/dependency-test-project"
        input_params:
          scan_type: "dependencies"
          include_transitive: true
          vulnerability_database: "nvd"
          severity_threshold: "low"
          include_fix_suggestions: true
        expected:
          patterns:
            - key: "result.dependency_vulnerabilities"
              validation:
                type: "array"
              required: true
            - key: "result.vulnerable_packages"
              validation:
                type: "exists"
              required: false
          custom_scripts:
            - name: "validate_dependency_security"
              language: "python"
              script: |
                def validate(response):
                    result = response.get('result', {})
                    dep_vulns = result.get('dependency_vulnerabilities', [])
                    vulnerable_packages = result.get('vulnerable_packages', {})
                    
                    # Validate dependency vulnerability structure
                    valid_dep_vulns = 0
                    for vuln in dep_vulns:
                        required_fields = ['package_name', 'version', 'vulnerability_id', 'severity']
                        if all(field in vuln for field in required_fields):
                            valid_dep_vulns += 1
                            
                            # Bonus for CVE ID
                            if 'cve_id' in vuln:
                                valid_dep_vulns += 0.2
                            
                            # Bonus for fix suggestion
                            if 'fix_suggestion' in vuln or 'patched_version' in vuln:
                                valid_dep_vulns += 0.3
                    
                    if dep_vulns:
                        quality_ratio = valid_dep_vulns / len(dep_vulns)
                        return True, quality_ratio, f"Dependency scan: {len(dep_vulns)} vulnerabilities, {int(quality_ratio * 100)}% quality"
                    else:
                        return True, 0.9, "No dependency vulnerabilities found (good security posture)"

      # Code injection vulnerability detection
      - id: "python_security_injection_detection"
        tool_name: "analyze_security"
        description: "Detect code injection vulnerabilities"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          scan_type: "code-analysis"
          focus_areas: ["sql-injection", "command-injection", "code-injection"]
          include_data_flow: true
          confidence_threshold: 0.7
        expected:
          patterns:
            - key: "result.injection_vulnerabilities"
              validation:
                type: "array"
              required: true
          custom_scripts:
            - name: "validate_injection_detection"
              language: "python"
              script: |
                def validate(response):
                    result = response.get('result', {})
                    injection_vulns = result.get('injection_vulnerabilities', [])
                    
                    # Validate injection vulnerability detection
                    high_confidence_vulns = 0
                    properly_categorized = 0
                    
                    for vuln in injection_vulns:
                        confidence = vuln.get('confidence', 0.0)
                        if confidence >= 0.7:
                            high_confidence_vulns += 1
                        
                        # Check for proper categorization
                        vuln_type = vuln.get('type', '').lower()
                        if any(inj_type in vuln_type for inj_type in ['sql', 'command', 'code']):
                            properly_categorized += 1
                    
                    total_vulns = len(injection_vulns)
                    if total_vulns > 0:
                        confidence_score = high_confidence_vulns / total_vulns
                        categorization_score = properly_categorized / total_vulns
                        overall_score = (confidence_score * 0.6) + (categorization_score * 0.4)
                        
                        return True, overall_score, f"Injection detection: {total_vulns} found, {high_confidence_vulns} high confidence"
                    else:
                        return True, 0.8, "No injection vulnerabilities detected"

  - name: "Security Analysis - Python Edge Cases"
    description: "Test edge cases and error handling for security analysis"
    test_cases:
      # Large codebase performance
      - id: "python_security_large_codebase"
        tool_name: "analyze_security"
        description: "Performance test on larger Python project"
        enabled: true
        project_path: "test-projects/dependency-test-project"
        input_params:
          scan_type: "comprehensive"
          include_dependencies: true
          include_transitive: true
          severity_threshold: "low"
        expected:
          patterns:
            - key: "result.scan_summary"
              validation:
                type: "exists"
              required: true
          performance_requirements:
            max_execution_time_ms: 30000
            max_memory_usage_mb: 256

      # Empty project handling
      - id: "python_security_empty_project"
        tool_name: "analyze_security"
        description: "Handle empty project gracefully"
        enabled: true
        project_path: "test-projects/nonexistent"
        input_params:
          scan_type: "basic"
        expected:
          patterns:
            - key: "error"
              validation:
                type: "exists"
              required: false
          allow_failure: true
          custom_scripts:
            - name: "validate_empty_project_handling"
              language: "python"
              script: |
                def validate(response):
                    if 'error' in response:
                        return True, 1.0, "Properly handled empty project with error"
                    
                    result = response.get('result', {})
                    scan_summary = result.get('scan_summary', {})
                    
                    if scan_summary.get('total_files_scanned', -1) == 0:
                        return True, 0.9, "Handled empty project with zero files scanned"
                    
                    return False, 0.0, "Did not properly handle empty project"

      # Invalid configuration handling
      - id: "python_security_invalid_config"
        tool_name: "analyze_security"
        description: "Handle invalid configuration parameters"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          scan_type: "invalid_type"
          severity_threshold: "invalid_severity"
          confidence_threshold: 2.0  # Invalid confidence > 1.0
        expected:
          patterns:
            - key: "error"
              validation:
                type: "exists"
              required: false
          allow_failure: true

# Performance baselines for security analysis tool
baselines:
  python_security_basic_scan:
    average_execution_time_ms: 8000.0
    peak_memory_mb: 96.0
    throughput_ops_per_sec: 0.125
  python_security_owasp_validation:
    average_execution_time_ms: 10000.0
    peak_memory_mb: 112.0
    throughput_ops_per_sec: 0.1
  python_security_dependency_scan:
    average_execution_time_ms: 12000.0
    peak_memory_mb: 128.0
    throughput_ops_per_sec: 0.083
  python_security_injection_detection:
    average_execution_time_ms: 6000.0
    peak_memory_mb: 80.0
    throughput_ops_per_sec: 0.167
  python_security_large_codebase:
    average_execution_time_ms: 25000.0
    peak_memory_mb: 200.0
    throughput_ops_per_sec: 0.04 