# Find Dependencies Tool - Python Test Configuration
# Tests the find_dependencies MCP tool against Python codebases

global:
  max_global_concurrency: 2
  timeout_seconds: 45
  fail_fast: false
  default_project_path: "test-projects/python-sample"

# Performance monitoring for dependency analysis
performance:
  enable_monitoring: true
  baseline_storage_path: "baselines/core-tools/"
  regression_detection:
    warning_threshold_percent: 25.0
    error_threshold_percent: 60.0

test_suites:
  - name: "Find Dependencies - Python Core Functionality"
    description: "Test dependency analysis for Python symbols and files"
    test_cases:
      # Class dependency analysis
      - id: "python_deps_class_analysis"
        tool_name: "find_dependencies"
        description: "Find dependencies for a Python class"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          target_symbol: "User"
          symbol_type: "class"
          language: "python"
          include_imports: true
          include_inheritance: true
          max_depth: 3
        expected:
          patterns:
            - key: "result.target_symbol"
              validation:
                type: "equals"
                value: "User"
              required: true
            - key: "result.dependencies"
              validation:
                type: "array"
              required: true
            - key: "result.dependency_count"
              validation:
                type: "range"
                min: 0
                max: 50
              required: true
          performance_requirements:
            max_execution_time_ms: 3000
            max_memory_usage_mb: 64
          custom_scripts:
            - name: "validate_dependency_structure"
              language: "python"
              script: |
                def validate(response):
                    result = response.get('result', {})
                    dependencies = result.get('dependencies', [])
                    
                    if not isinstance(dependencies, list):
                        return False, 0.0, "Dependencies should be an array"
                    
                    # Validate dependency structure
                    valid_deps = 0
                    for dep in dependencies:
                        if all(field in dep for field in ['name', 'type', 'file']):
                            valid_deps += 1
                    
                    if not dependencies:
                        return True, 0.5, "No dependencies found (valid for simple classes)"
                    
                    validity_ratio = valid_deps / len(dependencies)
                    if validity_ratio > 0.8:
                        return True, 1.0, f"Well-structured dependencies: {valid_deps}/{len(dependencies)}"
                    else:
                        return True, validity_ratio, f"Partially valid dependencies: {valid_deps}/{len(dependencies)}"

      # Function dependency analysis
      - id: "python_deps_function_analysis"
        tool_name: "find_dependencies"
        description: "Find dependencies for a Python function"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          target_symbol: "main"
          symbol_type: "function"
          language: "python"
          include_imports: true
          include_calls: true
          include_variables: true
          max_depth: 2
        expected:
          patterns:
            - key: "result.dependencies"
              validation:
                type: "array"
              required: true
          custom_scripts:
            - name: "validate_function_dependencies"
              language: "python"
              script: |
                def validate(response):
                    result = response.get('result', {})
                    dependencies = result.get('dependencies', [])
                    
                    # Check for different types of dependencies
                    import_deps = sum(1 for dep in dependencies if dep.get('relationship') == 'import')
                    call_deps = sum(1 for dep in dependencies if dep.get('relationship') == 'calls')
                    var_deps = sum(1 for dep in dependencies if dep.get('relationship') == 'uses_variable')
                    
                    total_deps = len(dependencies)
                    if total_deps == 0:
                        return True, 0.3, "No dependencies found (may be valid for simple functions)"
                    
                    # Score based on diversity of dependency types
                    type_count = sum(1 for count in [import_deps, call_deps, var_deps] if count > 0)
                    diversity_score = type_count / 3.0
                    
                    return True, diversity_score, f"Found {total_deps} dependencies: {import_deps} imports, {call_deps} calls, {var_deps} variables"

      # File-level dependency analysis
      - id: "python_deps_file_analysis"
        tool_name: "find_dependencies"
        description: "Find dependencies for a Python file"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          target_file: "models/user.py"
          language: "python"
          include_imports: true
          include_external: true
          resolve_paths: true
        expected:
          patterns:
            - key: "result.file_dependencies"
              validation:
                type: "array"
              required: true
            - key: "result.external_dependencies"
              validation:
                type: "array"
              required: false
          custom_scripts:
            - name: "validate_file_dependencies"
              language: "python"
              script: |
                def validate(response):
                    result = response.get('result', {})
                    file_deps = result.get('file_dependencies', [])
                    external_deps = result.get('external_dependencies', [])
                    
                    # Validate that we have some form of dependencies
                    total_deps = len(file_deps) + len(external_deps)
                    if total_deps == 0:
                        return True, 0.2, "No dependencies found (rare but possible)"
                    
                    # Check for proper path resolution
                    resolved_paths = sum(1 for dep in file_deps if 'resolved_path' in dep)
                    if file_deps:
                        resolution_ratio = resolved_paths / len(file_deps)
                        if resolution_ratio > 0.7:
                            return True, 1.0, f"Good path resolution: {resolved_paths}/{len(file_deps)} files, {len(external_deps)} external"
                        else:
                            return True, 0.6, f"Partial path resolution: {resolved_paths}/{len(file_deps)} files, {len(external_deps)} external"
                    
                    return True, 0.8, f"Found dependencies: {len(file_deps)} files, {len(external_deps)} external"

      # Transitive dependency analysis
      - id: "python_deps_transitive_analysis"
        tool_name: "find_dependencies"
        description: "Find transitive dependencies with depth control"
        enabled: true
        project_path: "test-projects/dependency-test-project"
        input_params:
          target_symbol: "UserManager"
          symbol_type: "class"
          language: "python"
          include_transitive: true
          max_depth: 4
          include_imports: true
          include_inheritance: true
        expected:
          patterns:
            - key: "result.dependency_graph"
              validation:
                type: "exists"
              required: false
            - key: "result.depth_levels"
              validation:
                type: "array"
              required: false
          performance_requirements:
            max_execution_time_ms: 5000
            max_memory_usage_mb: 96
          custom_scripts:
            - name: "validate_transitive_analysis"
              language: "python"
              script: |
                def validate(response):
                    result = response.get('result', {})
                    
                    # Check for transitive analysis features
                    has_graph = 'dependency_graph' in result
                    has_levels = 'depth_levels' in result
                    dependencies = result.get('dependencies', [])
                    
                    if not dependencies:
                        return True, 0.3, "No dependencies found (may be valid)"
                    
                    # Check for depth information in dependencies
                    deps_with_depth = sum(1 for dep in dependencies if 'depth' in dep)
                    
                    score = 0.5  # Base score for finding dependencies
                    if has_graph:
                        score += 0.2
                    if has_levels:
                        score += 0.2
                    if deps_with_depth > 0:
                        score += 0.1
                    
                    return True, min(score, 1.0), f"Transitive analysis: {len(dependencies)} deps, graph={has_graph}, levels={has_levels}"

  - name: "Find Dependencies - Python Edge Cases"
    description: "Test edge cases and error handling for dependency analysis"
    test_cases:
      # Non-existent symbol
      - id: "python_deps_nonexistent_symbol"
        tool_name: "find_dependencies"
        description: "Handle non-existent symbols"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          target_symbol: "NonExistentClass"
          symbol_type: "class"
          language: "python"
        expected:
          patterns:
            - key: "error"
              validation:
                type: "exists"
              required: false
            - key: "result.dependencies"
              validation:
                type: "array"
              required: false
          allow_failure: true
          custom_scripts:
            - name: "validate_nonexistent_handling"
              language: "python"
              script: |
                def validate(response):
                    # Should either return an error or empty dependencies
                    if 'error' in response:
                        return True, 1.0, "Properly handled non-existent symbol with error"
                    
                    result = response.get('result', {})
                    dependencies = result.get('dependencies', [])
                    if len(dependencies) == 0:
                        return True, 0.8, "Handled non-existent symbol with empty dependencies"
                    
                    return False, 0.0, "Did not properly handle non-existent symbol"

      # Circular dependency detection
      - id: "python_deps_circular_detection"
        tool_name: "find_dependencies"
        description: "Detect and handle circular dependencies"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          target_symbol: "main"
          symbol_type: "function"
          language: "python"
          include_transitive: true
          max_depth: 10
          detect_cycles: true
        expected:
          patterns:
            - key: "result.circular_dependencies"
              validation:
                type: "exists"
              required: false
          custom_scripts:
            - name: "validate_circular_detection"
              language: "python"
              script: |
                def validate(response):
                    result = response.get('result', {})
                    
                    # Check if circular dependency detection was attempted
                    has_circular_check = 'circular_dependencies' in result
                    circular_deps = result.get('circular_dependencies', [])
                    
                    if has_circular_check:
                        if circular_deps:
                            return True, 1.0, f"Detected {len(circular_deps)} circular dependencies"
                        else:
                            return True, 0.9, "Circular dependency check performed, none found"
                    
                    # Even without explicit circular detection, it's valid
                    return True, 0.5, "Basic dependency analysis completed"

      # Invalid parameters
      - id: "python_deps_invalid_params"
        tool_name: "find_dependencies"
        description: "Handle invalid input parameters"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          target_symbol: ""
          symbol_type: "invalid_type"
          language: "python"
          max_depth: -1
        expected:
          patterns:
            - key: "error"
              validation:
                type: "exists"
              required: false
          allow_failure: true

  - name: "Find Dependencies - Python Performance"
    description: "Performance testing for dependency analysis"
    test_cases:
      # Large project dependency analysis
      - id: "python_deps_performance_large"
        tool_name: "find_dependencies"
        description: "Performance test on larger Python project"
        enabled: true
        project_path: "test-projects/dependency-test-project"
        input_params:
          target_file: "main.py"
          language: "python"
          include_transitive: true
          max_depth: 3
          include_imports: true
          include_external: true
        expected:
          patterns:
            - key: "result"
              validation:
                type: "exists"
              required: true
          performance_requirements:
            max_execution_time_ms: 6000
            max_memory_usage_mb: 128

# Performance baselines for find_dependencies tool on Python projects
baselines:
  python_deps_class_analysis:
    average_execution_time_ms: 800.0
    peak_memory_mb: 32.0
    throughput_ops_per_sec: 1.25
  python_deps_function_analysis:
    average_execution_time_ms: 600.0
    peak_memory_mb: 24.0
    throughput_ops_per_sec: 1.67
  python_deps_file_analysis:
    average_execution_time_ms: 1200.0
    peak_memory_mb: 48.0
    throughput_ops_per_sec: 0.83
  python_deps_transitive_analysis:
    average_execution_time_ms: 3000.0
    peak_memory_mb: 80.0
    throughput_ops_per_sec: 0.33
  python_deps_performance_large:
    average_execution_time_ms: 4500.0
    peak_memory_mb: 112.0
    throughput_ops_per_sec: 0.22 