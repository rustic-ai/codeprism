# Repository Statistics Tool - Java Test Configuration
# Tests the repository_stats MCP tool against Java codebases

global:
  max_global_concurrency: 2
  timeout_seconds: 30
  fail_fast: false
  default_project_path: "test-projects/java-test-project"

# Performance monitoring for repository statistics
performance:
  enable_monitoring: true
  baseline_storage_path: "baselines/core-tools/"
  regression_detection:
    warning_threshold_percent: 20.0
    error_threshold_percent: 50.0

test_suites:
  - name: "Repository Stats - Java Core Functionality"
    description: "Test repository statistics analysis for Java projects"
    test_cases:
      # Basic Java repository statistics
      - id: "java_repo_stats_basic"
        tool_name: "repository_stats"
        description: "Basic repository statistics for Java project"
        enabled: true
        project_path: "test-projects/java-test-project"
        input_params:
          include_hidden: false
          file_patterns: ["*.java"]
          exclude_patterns: ["target/", "*.class", ".git"]
        expected:
          patterns:
            - key: "result.total_files"
              validation:
                type: "range"
                min: 3
                max: 30
              required: true
            - key: "result.total_lines"
              validation:
                type: "range"
                min: 50
                max: 2000
              required: true
            - key: "result.languages_detected"
              validation:
                type: "contains"
                values: ["Java"]
              required: true
            - key: "result.file_types.java"
              validation:
                type: "range"
                min: 3
                max: 20
              required: true
          performance_requirements:
            max_execution_time_ms: 2000
            max_memory_usage_mb: 64
          custom_scripts:
            - name: "validate_java_metrics"
              language: "python"
              script: |
                def validate(response):
                    result = response.get('result', {})
                    
                    # Validate basic structure
                    required_fields = ['total_files', 'total_lines', 'languages_detected', 'file_types']
                    if not all(field in result for field in required_fields):
                        return False, 0.0, "Missing required fields in response"
                    
                    # Validate Java-specific metrics
                    if 'Java' not in result.get('languages_detected', []):
                        return False, 0.0, "Java not detected in languages"
                    
                    java_files = result.get('file_types', {}).get('java', 0)
                    if java_files < 3:
                        return False, 0.0, f"Expected at least 3 Java files, got {java_files}"
                    
                    # Calculate quality score based on Java project characteristics
                    score = 1.0
                    
                    # Check for Java-specific metrics
                    if 'package_count' in result:
                        score += 0.2
                    if 'class_count' in result:
                        score += 0.2
                    if 'method_count' in result:
                        score += 0.2
                    
                    return True, min(score, 1.0), f"Found {java_files} Java files in {result.get('total_files', 0)} total files"

      # Java project with Maven structure
      - id: "java_repo_stats_maven_structure"
        tool_name: "repository_stats"
        description: "Repository statistics for Maven-structured Java project"
        enabled: true
        project_path: "test-projects/java-test-project"
        input_params:
          include_hidden: false
          include_build_files: true
          file_patterns: ["*.java", "*.xml", "*.properties"]
          exclude_patterns: ["target/", "*.class"]
        expected:
          patterns:
            - key: "result.build_system"
              validation:
                type: "equals"
                value: "maven"
              required: false
            - key: "result.project_structure"
              validation:
                type: "exists"
              required: false
          custom_scripts:
            - name: "validate_maven_structure"
              language: "python"
              script: |
                def validate(response):
                    result = response.get('result', {})
                    file_types = result.get('file_types', {})
                    
                    # Check for Maven indicators
                    has_pom = file_types.get('xml', 0) > 0
                    java_files = file_types.get('java', 0)
                    
                    if not has_pom:
                        return True, 0.5, f"Found {java_files} Java files but no Maven POM detected"
                    
                    # Check for typical Maven structure indicators
                    structure_score = 0.0
                    if 'project_structure' in result:
                        structure = result['project_structure']
                        if isinstance(structure, dict):
                            if 'src/main/java' in str(structure):
                                structure_score += 0.5
                            if 'src/test/java' in str(structure):
                                structure_score += 0.3
                    
                    total_score = 0.5 + structure_score
                    return True, min(total_score, 1.0), f"Maven project: {java_files} Java files, {file_types.get('xml', 0)} XML files"

      # Java complexity analysis
      - id: "java_repo_stats_complexity"
        tool_name: "repository_stats"
        description: "Java project complexity and architecture analysis"
        enabled: true
        project_path: "test-projects/java-test-project"
        input_params:
          include_complexity: true
          include_inheritance: true
          include_package_analysis: true
          file_patterns: ["*.java"]
        expected:
          patterns:
            - key: "result.complexity_metrics"
              validation:
                type: "exists"
              required: false
            - key: "result.package_analysis"
              validation:
                type: "exists"
              required: false
            - key: "result.inheritance_depth"
              validation:
                type: "range"
                min: 0
                max: 10
              required: false
          custom_scripts:
            - name: "validate_java_complexity"
              language: "python"
              script: |
                def validate(response):
                    result = response.get('result', {})
                    
                    # Check for Java-specific complexity features
                    complexity_features = 0
                    feature_details = []
                    
                    if 'complexity_metrics' in result:
                        complexity_features += 1
                        feature_details.append("complexity metrics")
                    
                    if 'package_analysis' in result:
                        complexity_features += 1
                        feature_details.append("package analysis")
                    
                    if 'inheritance_depth' in result:
                        complexity_features += 1
                        feature_details.append("inheritance analysis")
                    
                    if complexity_features == 0:
                        return True, 0.3, "Basic repository stats completed (complexity analysis not available)"
                    
                    score = 0.4 + (complexity_features / 3.0) * 0.6
                    return True, score, f"Java complexity analysis: {', '.join(feature_details)}"

  - name: "Repository Stats - Java Edge Cases"
    description: "Test edge cases and error conditions for Java projects"
    test_cases:
      # Java project without Maven
      - id: "java_repo_stats_no_build_system"
        tool_name: "repository_stats"
        description: "Handle Java project without build system"
        enabled: true
        project_path: "test-projects/java-test-project"
        input_params:
          include_hidden: false
          file_patterns: ["*.java"]
          exclude_patterns: ["*.xml", "*.gradle"]  # Exclude build files
        expected:
          patterns:
            - key: "result.total_files"
              validation:
                type: "range"
                min: 1
                max: 30
              required: true
          custom_scripts:
            - name: "validate_no_build_system"
              language: "python"
              script: |
                def validate(response):
                    result = response.get('result', {})
                    file_types = result.get('file_types', {})
                    
                    java_files = file_types.get('java', 0)
                    xml_files = file_types.get('xml', 0)
                    
                    if java_files > 0 and xml_files == 0:
                        return True, 1.0, f"Correctly analyzed {java_files} Java files without build system"
                    elif java_files > 0:
                        return True, 0.7, f"Found {java_files} Java files with some XML files"
                    else:
                        return False, 0.0, "No Java files found in project"

      # Mixed language project
      - id: "java_repo_stats_mixed_languages"
        tool_name: "repository_stats"
        description: "Handle project with Java and other languages"
        enabled: true
        project_path: "test-projects/java-test-project"
        input_params:
          include_hidden: false
          file_patterns: ["*.java", "*.js", "*.py", "*.rs"]
          detect_all_languages: true
        expected:
          patterns:
            - key: "result.languages_detected"
              validation:
                type: "array_min_length"
                min_length: 1
              required: true
          custom_scripts:
            - name: "validate_mixed_languages"
              language: "python"
              script: |
                def validate(response):
                    result = response.get('result', {})
                    languages = result.get('languages_detected', [])
                    file_types = result.get('file_types', {})
                    
                    if 'Java' not in languages:
                        return False, 0.0, "Java should be detected in mixed language project"
                    
                    # Count different language files
                    java_files = file_types.get('java', 0)
                    js_files = file_types.get('js', 0)
                    py_files = file_types.get('py', 0)
                    rs_files = file_types.get('rs', 0)
                    
                    total_other_lang_files = js_files + py_files + rs_files
                    language_count = len(languages)
                    
                    if language_count > 1:
                        return True, 1.0, f"Multi-language project: {language_count} languages, {java_files} Java + {total_other_lang_files} others"
                    else:
                        return True, 0.8, f"Single language detected: {java_files} Java files"

      # Large Java files
      - id: "java_repo_stats_large_files"
        tool_name: "repository_stats"
        description: "Handle large Java files"
        enabled: true
        project_path: "test-projects/java-test-project"
        input_params:
          include_hidden: false
          file_patterns: ["*.java"]
          max_file_size_mb: 1
          include_file_sizes: true
        expected:
          patterns:
            - key: "result.file_size_distribution"
              validation:
                type: "exists"
              required: false
          performance_requirements:
            max_execution_time_ms: 3000
            max_memory_usage_mb: 96

# Performance baselines for repository_stats tool on Java projects
baselines:
  java_repo_stats_basic:
    average_execution_time_ms: 600.0
    peak_memory_mb: 40.0
    throughput_ops_per_sec: 1.67
  java_repo_stats_maven_structure:
    average_execution_time_ms: 800.0
    peak_memory_mb: 48.0
    throughput_ops_per_sec: 1.25
  java_repo_stats_complexity:
    average_execution_time_ms: 1500.0
    peak_memory_mb: 64.0
    throughput_ops_per_sec: 0.67 