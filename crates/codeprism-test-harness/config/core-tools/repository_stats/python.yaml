# Repository Statistics Tool - Python Test Configuration
# Tests the repository_stats MCP tool against Python codebases

global:
  max_global_concurrency: 2
  timeout_seconds: 30
  fail_fast: false
  default_project_path: "test-projects/python-sample"

# Performance monitoring for repository statistics
performance:
  enable_monitoring: true
  baseline_storage_path: "baselines/core-tools/"
  regression_detection:
    warning_threshold_percent: 20.0
    error_threshold_percent: 50.0

test_suites:
  - name: "Repository Stats - Python Core Functionality"
    description: "Test repository statistics analysis for Python projects"
    test_cases:
      # Basic repository statistics
      - id: "python_repo_stats_basic"
        tool_name: "repository_stats"
        description: "Basic repository statistics for Python project"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          include_hidden: false
          file_patterns: ["*.py"]
          exclude_patterns: ["__pycache__", "*.pyc", ".git"]
        expected:
          patterns:
            - key: "result.total_files"
              validation:
                type: "range"
                min: 5
                max: 50
              required: true
            - key: "result.total_lines"
              validation:
                type: "range"
                min: 100
                max: 5000
              required: true
            - key: "result.languages_detected"
              validation:
                type: "contains"
                values: ["Python"]
              required: true
            - key: "result.file_types.py"
              validation:
                type: "range"
                min: 5
                max: 30
              required: true
          performance_requirements:
            max_execution_time_ms: 2000
            max_memory_usage_mb: 64
          custom_scripts:
            - name: "validate_python_metrics"
              language: "python"
              script: |
                def validate(response):
                    result = response.get('result', {})
                    
                    # Validate basic structure
                    required_fields = ['total_files', 'total_lines', 'languages_detected', 'file_types']
                    if not all(field in result for field in required_fields):
                        return False, 0.0, "Missing required fields in response"
                    
                    # Validate Python-specific metrics
                    if 'Python' not in result.get('languages_detected', []):
                        return False, 0.0, "Python not detected in languages"
                    
                    py_files = result.get('file_types', {}).get('py', 0)
                    if py_files < 5:
                        return False, 0.0, f"Expected at least 5 Python files, got {py_files}"
                    
                    # Calculate quality score based on comprehensiveness
                    score = 1.0
                    
                    # Check for advanced metrics
                    if 'complexity_metrics' in result:
                        score += 0.2
                    if 'dependency_count' in result:
                        score += 0.2
                    if 'test_coverage_estimate' in result:
                        score += 0.2
                    
                    return True, min(score, 1.0), f"Found {py_files} Python files in {result.get('total_files', 0)} total files"

      # Repository statistics with detailed analysis
      - id: "python_repo_stats_detailed"
        tool_name: "repository_stats"
        description: "Detailed repository statistics with complexity analysis"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          include_hidden: false
          include_complexity: true
          include_dependencies: true
          include_tests: true
          file_patterns: ["*.py"]
        expected:
          patterns:
            - key: "result.complexity_metrics"
              validation:
                type: "exists"
              required: false
            - key: "result.dependency_analysis"
              validation:
                type: "exists"
              required: false
            - key: "result.test_files_count"
              validation:
                type: "range"
                min: 0
                max: 20
              required: false
          custom_scripts:
            - name: "validate_detailed_analysis"
              language: "python"
              script: |
                def validate(response):
                    result = response.get('result', {})
                    
                    # Check for enhanced analysis features
                    advanced_features = 0
                    if 'complexity_metrics' in result:
                        advanced_features += 1
                    if 'dependency_analysis' in result:
                        advanced_features += 1
                    if 'test_files_count' in result:
                        advanced_features += 1
                    
                    if advanced_features == 0:
                        return False, 0.0, "No advanced analysis features found"
                    
                    score = advanced_features / 3.0
                    return True, score, f"Advanced analysis completed with {advanced_features}/3 features"

      # Large project handling
      - id: "python_repo_stats_large_project"
        tool_name: "repository_stats"
        description: "Repository statistics for larger Python projects"
        enabled: true
        project_path: "test-projects/dependency-test-project"
        input_params:
          include_hidden: false
          file_patterns: ["*.py"]
          max_file_size_mb: 10
        expected:
          patterns:
            - key: "result.total_files"
              validation:
                type: "range"
                min: 1
                max: 100
              required: true
          performance_requirements:
            max_execution_time_ms: 5000
            max_memory_usage_mb: 128

  - name: "Repository Stats - Python Edge Cases"
    description: "Test edge cases and error conditions for repository statistics"
    test_cases:
      # Empty directory handling
      - id: "python_repo_stats_empty_dir"
        tool_name: "repository_stats"
        description: "Handle empty or non-existent directories"
        enabled: true
        project_path: "test-projects/nonexistent"
        input_params:
          include_hidden: false
          file_patterns: ["*.py"]
        expected:
          patterns:
            - key: "error"
              validation:
                type: "exists"
              required: false
          allow_failure: true
          custom_scripts:
            - name: "validate_error_handling"
              language: "python"
              script: |
                def validate(response):
                    # For non-existent directories, we expect either:
                    # 1. An error response
                    # 2. Zero files with appropriate messaging
                    
                    if 'error' in response:
                        return True, 1.0, "Properly handled non-existent directory with error"
                    
                    result = response.get('result', {})
                    if result.get('total_files', -1) == 0:
                        return True, 0.8, "Handled non-existent directory gracefully"
                    
                    return False, 0.0, "Did not properly handle non-existent directory"

      # Invalid parameters
      - id: "python_repo_stats_invalid_params"
        tool_name: "repository_stats"
        description: "Handle invalid input parameters"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          include_hidden: "invalid_boolean"
          file_patterns: 123  # Invalid type
        expected:
          patterns:
            - key: "error"
              validation:
                type: "exists"
              required: false
          allow_failure: true

      # Very large file patterns
      - id: "python_repo_stats_complex_patterns"
        tool_name: "repository_stats"
        description: "Handle complex file patterns and exclusions"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          include_hidden: true
          file_patterns: ["*.py", "*.pyi", "*.pyx"]
          exclude_patterns: ["*test*", "*__pycache__*", "*.pyc", ".git", ".venv"]
        expected:
          patterns:
            - key: "result.total_files"
              validation:
                type: "range"
                min: 0
                max: 50
              required: true

# Performance baselines for repository_stats tool on Python projects
baselines:
  python_repo_stats_basic:
    average_execution_time_ms: 500.0
    peak_memory_mb: 32.0
    throughput_ops_per_sec: 2.0
  python_repo_stats_detailed:
    average_execution_time_ms: 1200.0
    peak_memory_mb: 64.0
    throughput_ops_per_sec: 0.8
  python_repo_stats_large_project:
    average_execution_time_ms: 3000.0
    peak_memory_mb: 96.0
    throughput_ops_per_sec: 0.3 