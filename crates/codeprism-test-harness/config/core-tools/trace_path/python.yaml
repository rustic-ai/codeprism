# Trace Path Tool - Python Test Configuration
# Tests the trace_path MCP tool for finding paths between code symbols

global:
  max_global_concurrency: 2
  timeout_seconds: 45
  fail_fast: false
  default_project_path: "test-projects/python-sample"

performance:
  enable_monitoring: true
  baseline_storage_path: "baselines/core-tools/"
  regression_detection:
    warning_threshold_percent: 30.0
    error_threshold_percent: 70.0

test_suites:
  - name: "Trace Path - Python Core Functionality"
    description: "Test path tracing between Python symbols"
    test_cases:
      # Basic path tracing between functions
      - id: "python_trace_function_path"
        tool_name: "trace_path"
        description: "Find path between two Python functions"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          start_symbol: "main"
          end_symbol: "get_user"
          symbol_type: "function"
          language: "python"
          max_depth: 5
        expected:
          patterns:
            - key: "result.path_found"
              validation:
                type: "boolean"
              required: true
            - key: "result.path_steps"
              validation:
                type: "array"
              required: false
          performance_requirements:
            max_execution_time_ms: 3000
            max_memory_usage_mb: 64
          custom_scripts:
            - name: "validate_path_structure"
              language: "python"
              script: |
                def validate(response):
                    result = response.get('result', {})
                    path_found = result.get('path_found', False)
                    path_steps = result.get('path_steps', [])
                    
                    if path_found and path_steps:
                        return True, 1.0, f"Path found with {len(path_steps)} steps"
                    elif not path_found:
                        return True, 0.7, "No path found (acceptable for disconnected symbols)"
                    else:
                        return True, 0.5, "Path tracing completed"

      # Class inheritance path tracing
      - id: "python_trace_class_inheritance"
        tool_name: "trace_path"
        description: "Trace inheritance paths between classes"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          start_symbol: "User"
          end_symbol: "BaseModel"
          symbol_type: "class"
          language: "python"
          include_inheritance: true
          max_depth: 3
        expected:
          patterns:
            - key: "result.inheritance_chain"
              validation:
                type: "exists"
              required: false

baselines:
  python_trace_function_path:
    average_execution_time_ms: 1200.0
    peak_memory_mb: 32.0
    throughput_ops_per_sec: 0.83 