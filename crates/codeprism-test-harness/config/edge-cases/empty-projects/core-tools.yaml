# Empty Projects Edge Case Testing - Core Tools
# Tests how core MCP tools handle empty or minimal projects

global:
  max_global_concurrency: 3
  timeout_seconds: 30
  fail_fast: false
  default_project_path: "test-projects/empty-project"

# Create minimal test project structure
setup:
  pre_test_commands:
    - "mkdir -p test-projects/empty-project"
    - "touch test-projects/empty-project/empty.py"
    - "echo '# Empty file' > test-projects/empty-project/minimal.py"

# Performance monitoring for edge case testing
performance:
  enable_monitoring: true
  baseline_storage_path: "baselines/edge-cases/"
  regression_detection:
    warning_threshold_percent: 50.0
    error_threshold_percent: 100.0

test_suites:
  - name: "Empty Projects - Core Tools"
    description: "Test core tools with empty/minimal projects"
    test_cases:
      # Repository stats on empty project
      - id: "empty_project_repository_stats"
        tool_name: "repository_stats"
        description: "Repository stats for empty project"
        enabled: true
        project_path: "test-projects/empty-project"
        input_params:
          include_complexity: true
          include_file_types: true
        expected:
          patterns:
            - key: "result.total_files"
              validation:
                type: "range"
                min: 0
                max: 5
              required: true
            - key: "result.total_lines"
              validation:
                type: "range"
                min: 0
                max: 10
              required: true
          performance_requirements:
            max_execution_time_ms: 1000
            max_memory_usage_mb: 16
          custom_scripts:
            - name: "validate_empty_project_stats"
              language: "python"
              script: |
                def validate(response):
                    result = response.get('result', {})
                    total_files = result.get('total_files', 0)
                    total_lines = result.get('total_lines', 0)
                    
                    if total_files == 0:
                        return True, 1.0, "Correctly handled completely empty project"
                    elif total_files <= 2 and total_lines <= 5:
                        return True, 0.9, f"Handled minimal project: {total_files} files, {total_lines} lines"
                    else:
                        return False, 0.0, f"Unexpected results for empty project: {total_files} files, {total_lines} lines"

      # Symbol search on empty project
      - id: "empty_project_search_symbols"
        tool_name: "search_symbols"
        description: "Symbol search in empty project"
        enabled: true
        project_path: "test-projects/empty-project"
        input_params:
          query: "class:*"
          language: "python"
        expected:
          patterns:
            - key: "result.symbols"
              validation:
                type: "array_max_length"
                max_length: 1
              required: true
          allow_empty_results: true
          custom_scripts:
            - name: "validate_empty_symbol_search"
              language: "python"
              script: |
                def validate(response):
                    result = response.get('result', {})
                    symbols = result.get('symbols', [])
                    
                    if len(symbols) == 0:
                        return True, 1.0, "Correctly found no symbols in empty project"
                    else:
                        return True, 0.5, f"Found {len(symbols)} symbols in minimal project"

      # Dependency analysis on empty project
      - id: "empty_project_find_dependencies"
        tool_name: "find_dependencies"
        description: "Dependency analysis for empty project"
        enabled: true
        project_path: "test-projects/empty-project"
        input_params:
          target_symbol: "nonexistent"
          symbol_type: "class"
          language: "python"
        expected:
          patterns:
            - key: "result.dependencies"
              validation:
                type: "array_max_length"
                max_length: 0
              required: true
          allow_empty_results: true

      # Path tracing on empty project
      - id: "empty_project_trace_path"
        tool_name: "trace_path"
        description: "Path tracing in empty project"
        enabled: true
        project_path: "test-projects/empty-project"
        input_params:
          source_symbol: "nonexistent_source"
          target_symbol: "nonexistent_target"
          language: "python"
        expected:
          patterns:
            - key: "result.paths"
              validation:
                type: "array_max_length"
                max_length: 0
              required: true
          allow_empty_results: true

      # Reference finding on empty project
      - id: "empty_project_find_references"
        tool_name: "find_references"
        description: "Reference finding in empty project"
        enabled: true
        project_path: "test-projects/empty-project"
        input_params:
          target_symbol: "nonexistent"
          symbol_type: "class"
          language: "python"
        expected:
          patterns:
            - key: "result.references"
              validation:
                type: "array_max_length"
                max_length: 0
              required: true
          allow_empty_results: true

      # Symbol explanation on empty project
      - id: "empty_project_explain_symbol"
        tool_name: "explain_symbol"
        description: "Symbol explanation for empty project"
        enabled: true
        project_path: "test-projects/empty-project"
        input_params:
          target_symbol: "nonexistent"
          symbol_type: "class"
          language: "python"
        expected:
          patterns:
            - key: "error"
              validation:
                type: "exists"
              required: false
          allow_failure: true
          custom_scripts:
            - name: "validate_symbol_not_found"
              language: "python"
              script: |
                def validate(response):
                    if 'error' in response:
                        error_msg = response.get('error', {}).get('message', '').lower()
                        if 'not found' in error_msg or 'nonexistent' in error_msg:
                            return True, 1.0, "Correctly reported symbol not found"
                        else:
                            return True, 0.7, "Reported error for nonexistent symbol"
                    
                    result = response.get('result', {})
                    if not result:
                        return True, 0.8, "Returned empty result for nonexistent symbol"
                    
                    return False, 0.0, "Unexpected response for nonexistent symbol"

  - name: "Empty Projects - Analysis Tools"
    description: "Test analysis tools with empty projects"
    test_cases:
      # Security analysis on empty project
      - id: "empty_project_analyze_security"
        tool_name: "analyze_security"
        description: "Security analysis for empty project"
        enabled: true
        project_path: "test-projects/empty-project"
        input_params:
          scan_type: "basic"
          include_dependencies: false
        expected:
          patterns:
            - key: "result.vulnerabilities"
              validation:
                type: "array_max_length"
                max_length: 0
              required: true
          allow_empty_results: true

      # Performance analysis on empty project
      - id: "empty_project_analyze_performance"
        tool_name: "analyze_performance"
        description: "Performance analysis for empty project"
        enabled: true
        project_path: "test-projects/empty-project"
        input_params:
          analysis_type: "basic"
        expected:
          patterns:
            - key: "result.bottlenecks"
              validation:
                type: "array_max_length"
                max_length: 0
              required: true
          allow_empty_results: true

      # Complexity analysis on empty project
      - id: "empty_project_analyze_complexity"
        tool_name: "analyze_complexity"
        description: "Complexity analysis for empty project"
        enabled: true
        project_path: "test-projects/empty-project"
        input_params:
          analysis_scope: "project"
        expected:
          patterns:
            - key: "result.total_complexity"
              validation:
                type: "range"
                min: 0
                max: 2
              required: true

      # Duplicate detection on empty project
      - id: "empty_project_find_duplicates"
        tool_name: "find_duplicates"
        description: "Duplicate detection for empty project"
        enabled: true
        project_path: "test-projects/empty-project"
        input_params:
          similarity_threshold: 0.8
        expected:
          patterns:
            - key: "result.duplicates"
              validation:
                type: "array_max_length"
                max_length: 0
              required: true
          allow_empty_results: true

      # Unused code detection on empty project
      - id: "empty_project_find_unused_code"
        tool_name: "find_unused_code"
        description: "Unused code detection for empty project"
        enabled: true
        project_path: "test-projects/empty-project"
        input_params:
          analysis_type: "comprehensive"
        expected:
          patterns:
            - key: "result.unused_items"
              validation:
                type: "array_max_length"
                max_length: 1
              required: true
          allow_empty_results: true

# Performance baselines for empty project testing
baselines:
  empty_project_repository_stats:
    average_execution_time_ms: 200.0
    peak_memory_mb: 8.0
    throughput_ops_per_sec: 5.0
  empty_project_search_symbols:
    average_execution_time_ms: 300.0
    peak_memory_mb: 12.0
    throughput_ops_per_sec: 3.33
  empty_project_analyze_security:
    average_execution_time_ms: 500.0
    peak_memory_mb: 16.0
    throughput_ops_per_sec: 2.0
