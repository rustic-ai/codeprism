# Optimize Workflow Tool - Python Test Configuration
# Tests the optimize_workflow MCP tool for optimizing analysis workflow execution

global:
  max_global_concurrency: 2
  timeout_seconds: 45
  fail_fast: false
  default_project_path: "test-projects/python-sample"

# Performance monitoring for workflow optimization
performance:
  enable_monitoring: true
  baseline_storage_path: "baselines/workflow-tools/"
  regression_detection:
    warning_threshold_percent: 30.0
    error_threshold_percent: 70.0

test_suites:
  - name: "Optimize Workflow - Core Functionality"
    description: "Test workflow optimization and performance improvements"
    test_cases:
      # Basic workflow optimization
      - id: "python_optimize_basic_workflow"
        tool_name: "optimize_workflow"
        description: "Basic workflow optimization analysis"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          workflow_definition:
            - tool: "repository_stats"
              estimated_time: 2000
              memory_usage: 32
            - tool: "search_symbols"
              estimated_time: 1500
              memory_usage: 24
            - tool: "analyze_security"
              estimated_time: 8000
              memory_usage: 96
          optimization_goals: ["minimize_time", "optimize_memory"]
          resource_constraints:
            max_memory_mb: 128
            max_execution_time_ms: 15000
        expected:
          patterns:
            - key: "result.optimized_workflow"
              validation:
                type: "array"
              required: true
            - key: "result.optimization_improvements"
              validation:
                type: "exists"
              required: true
            - key: "result.estimated_performance_gain"
              validation:
                type: "exists"
              required: false
          performance_requirements:
            max_execution_time_ms: 3000
            max_memory_usage_mb: 48

      # Parallelization optimization
      - id: "python_optimize_parallelization"
        tool_name: "optimize_workflow"
        description: "Optimize workflow for parallel execution"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          workflow_definition:
            - tool: "repository_stats"
              dependencies: []
              parallelizable: true
            - tool: "search_symbols"
              dependencies: []
              parallelizable: true
            - tool: "find_dependencies"
              dependencies: ["search_symbols"]
              parallelizable: false
            - tool: "analyze_security"
              dependencies: []
              parallelizable: true
          optimization_goals: ["maximize_parallelization"]
          available_cores: 4
        expected:
          patterns:
            - key: "result.optimized_workflow"
              validation:
                type: "array"
              required: true
            - key: "result.parallel_execution_plan"
              validation:
                type: "exists"
              required: true

      # Resource optimization
      - id: "python_optimize_resource_usage"
        tool_name: "optimize_workflow"
        description: "Optimize workflow for resource efficiency"
        enabled: true
        project_path: "test-projects/dependency-test-project"
        input_params:
          workflow_definition:
            - tool: "analyze_performance"
              memory_usage: 80
              cpu_intensive: true
            - tool: "find_duplicates"
              memory_usage: 64
              cpu_intensive: false
            - tool: "analyze_complexity"
              memory_usage: 40
              cpu_intensive: false
          optimization_goals: ["minimize_memory", "balance_cpu_usage"]
          resource_constraints:
            max_memory_mb: 128
            max_cpu_usage: 80
        expected:
          patterns:
            - key: "result.optimized_workflow"
              validation:
                type: "array"
              required: true
            - key: "result.resource_optimization"
              validation:
                type: "exists"
              required: true

      # Caching optimization
      - id: "python_optimize_caching"
        tool_name: "optimize_workflow"
        description: "Optimize workflow with caching strategies"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          workflow_definition:
            - tool: "repository_stats"
              cacheable: true
              cache_key_params: ["file_patterns", "include_complexity"]
            - tool: "search_symbols"
              cacheable: true
              cache_key_params: ["query", "language"]
            - tool: "analyze_security"
              cacheable: false
              reason: "security_sensitive"
          optimization_goals: ["enable_caching"]
          cache_strategy: "aggressive"
        expected:
          patterns:
            - key: "result.optimized_workflow"
              validation:
                type: "array"
              required: true
            - key: "result.caching_strategy"
              validation:
                type: "exists"
              required: true

  - name: "Optimize Workflow - Advanced Scenarios"
    description: "Test advanced optimization scenarios"
    test_cases:
      # Complex dependency optimization
      - id: "python_optimize_complex_dependencies"
        tool_name: "optimize_workflow"
        description: "Optimize complex workflow with dependencies"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          workflow_definition:
            - tool: "repository_stats"
              dependencies: []
            - tool: "search_symbols"
              dependencies: ["repository_stats"]
            - tool: "find_dependencies"
              dependencies: ["search_symbols"]
            - tool: "explain_symbol"
              dependencies: ["search_symbols", "find_dependencies"]
            - tool: "analyze_security"
              dependencies: []
          optimization_goals: ["minimize_critical_path"]
        expected:
          patterns:
            - key: "result.optimized_workflow"
              validation:
                type: "array"
              required: true
            - key: "result.critical_path_analysis"
              validation:
                type: "exists"
              required: false

      # Performance prediction
      - id: "python_optimize_performance_prediction"
        tool_name: "optimize_workflow"
        description: "Predict performance improvements from optimization"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          current_workflow:
            - tool: "analyze_security"
              actual_time: 10000
              actual_memory: 120
            - tool: "analyze_performance"
              actual_time: 6000
              actual_memory: 80
          optimization_goals: ["predict_improvements"]
          historical_data: true
        expected:
          patterns:
            - key: "result.performance_predictions"
              validation:
                type: "exists"
              required: true
            - key: "result.confidence_scores"
              validation:
                type: "exists"
              required: false

  - name: "Optimize Workflow - Edge Cases"
    description: "Test optimization edge cases and error handling"
    test_cases:
      # Empty workflow optimization
      - id: "python_optimize_empty_workflow"
        tool_name: "optimize_workflow"
        description: "Handle empty workflow optimization"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          workflow_definition: []
          optimization_goals: ["minimize_time"]
        expected:
          patterns:
            - key: "error"
              validation:
                type: "exists"
              required: false
          allow_failure: true

      # Impossible constraints
      - id: "python_optimize_impossible_constraints"
        tool_name: "optimize_workflow"
        description: "Handle impossible optimization constraints"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          workflow_definition:
            - tool: "analyze_security"
              estimated_time: 10000
              memory_usage: 120
          resource_constraints:
            max_memory_mb: 50  # Impossible constraint
            max_execution_time_ms: 1000  # Impossible constraint
        expected:
          patterns:
            - key: "result.optimization_warnings"
              validation:
                type: "array"
              required: false
            - key: "result.constraint_violations"
              validation:
                type: "exists"
              required: false

# Performance baselines for workflow optimization tool
baselines:
  python_optimize_basic_workflow:
    average_execution_time_ms: 1500.0
    peak_memory_mb: 32.0
    throughput_ops_per_sec: 0.67
  python_optimize_parallelization:
    average_execution_time_ms: 2000.0
    peak_memory_mb: 40.0
    throughput_ops_per_sec: 0.5
  python_optimize_resource_usage:
    average_execution_time_ms: 1800.0
    peak_memory_mb: 36.0
    throughput_ops_per_sec: 0.56
  python_optimize_caching:
    average_execution_time_ms: 1200.0
    peak_memory_mb: 28.0
    throughput_ops_per_sec: 0.83
