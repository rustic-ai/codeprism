# Suggest Analysis Workflow Tool - Python Test Configuration
# Tests the suggest_analysis_workflow MCP tool for recommending optimal analysis sequences

global:
  max_global_concurrency: 2
  timeout_seconds: 30
  fail_fast: false
  default_project_path: "test-projects/python-sample"

# Performance monitoring for workflow suggestions
performance:
  enable_monitoring: true
  baseline_storage_path: "baselines/workflow-tools/"
  regression_detection:
    warning_threshold_percent: 25.0
    error_threshold_percent: 60.0

test_suites:
  - name: "Suggest Analysis Workflow - Core Functionality"
    description: "Test analysis workflow recommendation based on project characteristics"
    test_cases:
      # Basic workflow suggestion
      - id: "python_workflow_basic_suggestion"
        tool_name: "suggest_analysis_workflow"
        description: "Basic workflow suggestion for Python project"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          project_type: "python"
          analysis_goals: ["code_quality", "security", "performance"]
          time_budget: "medium"
          include_dependencies: true
        expected:
          patterns:
            - key: "result.recommended_workflow"
              validation:
                type: "array_min_length"
                min_length: 3
              required: true
            - key: "result.workflow_reasoning"
              validation:
                type: "exists"
              required: true
            - key: "result.estimated_duration"
              validation:
                type: "exists"
              required: false
          performance_requirements:
            max_execution_time_ms: 2000
            max_memory_usage_mb: 32

      # Security-focused workflow
      - id: "python_workflow_security_focused"
        tool_name: "suggest_analysis_workflow"
        description: "Security-focused analysis workflow recommendation"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          project_type: "python"
          analysis_goals: ["security", "vulnerability_assessment"]
          security_level: "high"
          compliance_requirements: ["owasp-top10", "cwe-top25"]
        expected:
          patterns:
            - key: "result.recommended_workflow"
              validation:
                type: "array"
              required: true
            - key: "result.security_tools_included"
              validation:
                type: "array"
              required: true

      # Performance optimization workflow
      - id: "python_workflow_performance_focused"
        tool_name: "suggest_analysis_workflow"
        description: "Performance optimization workflow recommendation"
        enabled: true
        project_path: "test-projects/dependency-test-project"
        input_params:
          project_type: "python"
          analysis_goals: ["performance", "optimization"]
          performance_targets: ["execution_time", "memory_usage"]
          project_size: "large"
        expected:
          patterns:
            - key: "result.recommended_workflow"
              validation:
                type: "array"
              required: true
            - key: "result.performance_tools_included"
              validation:
                type: "array"
              required: true

      # Multi-language project workflow
      - id: "python_workflow_multi_language"
        tool_name: "suggest_analysis_workflow"
        description: "Workflow for multi-language projects"
        enabled: true
        project_path: "test-projects/js-dependency-test-project"
        input_params:
          project_type: "multi-language"
          languages: ["python", "javascript"]
          analysis_goals: ["code_quality", "framework_analysis"]
          cross_language_analysis: true
        expected:
          patterns:
            - key: "result.recommended_workflow"
              validation:
                type: "array"
              required: true
            - key: "result.language_specific_steps"
              validation:
                type: "exists"
              required: false

  - name: "Suggest Analysis Workflow - Edge Cases"
    description: "Test workflow suggestions for edge cases"
    test_cases:
      # Minimal project workflow
      - id: "python_workflow_minimal_project"
        tool_name: "suggest_analysis_workflow"
        description: "Workflow for minimal/empty projects"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          project_type: "python"
          project_size: "minimal"
          analysis_goals: ["basic_validation"]
        expected:
          patterns:
            - key: "result.recommended_workflow"
              validation:
                type: "array_min_length"
                min_length: 1
              required: true

      # Invalid analysis goals
      - id: "python_workflow_invalid_goals"
        tool_name: "suggest_analysis_workflow"
        description: "Handle invalid analysis goals"
        enabled: true
        project_path: "test-projects/python-sample"
        input_params:
          project_type: "python"
          analysis_goals: ["invalid_goal", "nonexistent_analysis"]
        expected:
          patterns:
            - key: "error"
              validation:
                type: "exists"
              required: false
          allow_failure: true

# Performance baselines for workflow suggestion tool
baselines:
  python_workflow_basic_suggestion:
    average_execution_time_ms: 500.0
    peak_memory_mb: 16.0
    throughput_ops_per_sec: 2.0
  python_workflow_security_focused:
    average_execution_time_ms: 600.0
    peak_memory_mb: 20.0
    throughput_ops_per_sec: 1.67
  python_workflow_performance_focused:
    average_execution_time_ms: 700.0
    peak_memory_mb: 24.0
    throughput_ops_per_sec: 1.43
  python_workflow_multi_language:
    average_execution_time_ms: 800.0
    peak_memory_mb: 28.0
    throughput_ops_per_sec: 1.25
