# Database MCP Server Specification
# Demonstrates SQL operations, query tools, and database-specific testing

name: "Database MCP Server"
version: "2.1.0"
description: "MCP server providing database operations for PostgreSQL and MySQL"

# Database servers typically support tools for SQL operations
capabilities:
  tools: true
  resources: true
  prompts: false
  sampling: false
  logging: true
  experimental:
    transactions: true
    prepared_statements: true

# Database server startup configuration
server:
  command: "python"
  args: ["-m", "database_mcp_server", "--config", "db_config.json"]
  env:
    DATABASE_URL: "postgresql://test:test@localhost:5432/testdb"
    LOG_LEVEL: "info"
    MAX_CONNECTIONS: "10"
  working_dir: "./database_server"
  transport: "stdio"
  startup_timeout_seconds: 45  # Database connection may take longer
  shutdown_timeout_seconds: 15

# Database operation tools
tools:
  - name: "execute_query"
    description: "Execute a SQL query and return results"
    input_schema: "./schemas/execute_query_input.json"
    output_schema: "./schemas/execute_query_output.json"
    tests:
      - name: "simple_select"
        description: "Execute a simple SELECT query"
        input:
          query: "SELECT id, name FROM users WHERE active = true LIMIT 5"
          parameters: []
        expected:
          allow_extra_fields: true
          schema:
            type: object
            required: ["rows", "row_count"]
            properties:
              rows:
                type: array
                items:
                  type: object
              row_count:
                type: integer
          fields:
            - path: "$.row_count"
              field_type: "integer"
              min: 0
              required: true
            - path: "$.rows"
              field_type: "array"
              required: true
        performance:
          max_duration_ms: 5000
          max_memory_mb: 100
        tags: ["database", "select", "basic"]

      - name: "parameterized_query"
        description: "Execute query with parameters to prevent SQL injection"
        input:
          query: "SELECT * FROM products WHERE category = ? AND price > ?"
          parameters: ["electronics", 100.0]
        expected:
          allow_extra_fields: true
          fields:
            - path: "$.rows"
              field_type: "array"
              required: true
            - path: "$.row_count"
              field_type: "integer"
              min: 0
              required: true
        performance:
          max_duration_ms: 3000
        tags: ["database", "parameterized", "security"]

      - name: "invalid_sql_error"
        description: "Test error handling for invalid SQL"
        input:
          query: "INVALID SQL SYNTAX HERE"
          parameters: []
        expected:
          error: true
          error_code: -32603
          error_message_contains: "syntax error"
          allow_extra_fields: true
        tags: ["database", "error-handling", "validation"]

      - name: "large_result_set"
        description: "Test handling of large result sets"
        input:
          query: "SELECT * FROM large_table LIMIT 1000"
          parameters: []
        expected:
          allow_extra_fields: true
          fields:
            - path: "$.row_count"
              field_type: "integer"
              max: 1000
              required: true
        performance:
          max_duration_ms: 10000
          max_memory_mb: 500
        tags: ["database", "performance", "large-data"]

  - name: "get_schema"
    description: "Retrieve database schema information"
    tests:
      - name: "list_tables"
        description: "Get list of all tables in database"
        input:
          include_views: false
        expected:
          allow_extra_fields: true
          schema:
            type: object
            required: ["tables"]
            properties:
              tables:
                type: array
                items:
                  type: object
                  required: ["name", "type"]
                  properties:
                    name:
                      type: string
                    type:
                      type: string
          fields:
            - path: "$.tables"
              field_type: "array"
              required: true
        tags: ["database", "schema", "metadata"]

      - name: "table_details"
        description: "Get detailed information about a specific table"
        input:
          table_name: "users"
          include_indexes: true
        expected:
          allow_extra_fields: true
          fields:
            - path: "$.table_name"
              value: "users"
              required: true
            - path: "$.columns"
              field_type: "array"
              required: true
            - path: "$.indexes"
              field_type: "array"
              required: true
        tags: ["database", "schema", "details"]

  - name: "execute_transaction"
    description: "Execute multiple SQL statements in a transaction"
    tests:
      - name: "simple_transaction"
        description: "Execute INSERT and UPDATE in transaction"
        input:
          statements:
            - "INSERT INTO orders (customer_id, total) VALUES (1, 100.00)"
            - "UPDATE customers SET last_order = NOW() WHERE id = 1"
          isolation_level: "READ_COMMITTED"
        expected:
          allow_extra_fields: true
          schema:
            type: object
            required: ["success", "affected_rows"]
            properties:
              success:
                type: boolean
              affected_rows:
                type: integer
          fields:
            - path: "$.success"
              value: true
              required: true
            - path: "$.affected_rows"
              field_type: "integer"
              min: 0
              required: true
        performance:
          max_duration_ms: 8000
        tags: ["database", "transaction", "acid"]

      - name: "transaction_rollback"
        description: "Test transaction rollback on error"
        input:
          statements:
            - "INSERT INTO orders (customer_id, total) VALUES (1, 100.00)"
            - "INVALID SQL THAT CAUSES ERROR"
          isolation_level: "READ_COMMITTED"
        expected:
          error: true
          error_code: -32603
          error_message_contains: "transaction"
          allow_extra_fields: true
        tags: ["database", "transaction", "error-handling"]

# Database resources (connection strings, schemas, etc.)
resources:
  - uri_template: "db://schema/{schema_name}"
    name: "Database Schema"
    mime_type: "application/json"
    tests:
      - name: "get_public_schema"
        description: "Retrieve public schema definition"
        input:
          schema_name: "public"
        expected:
          allow_extra_fields: true
          schema:
            type: object
            required: ["schema_name", "tables"]
            properties:
              schema_name:
                type: string
              tables:
                type: array
          fields:
            - path: "$.schema_name"
              value: "public"
              required: true
        tags: ["database", "resource", "schema"]

  - uri_template: "db://connection/{connection_id}/status"
    name: "Connection Status"
    mime_type: "application/json"
    tests:
      - name: "connection_health"
        description: "Check database connection health"
        input:
          connection_id: "main"
        expected:
          allow_extra_fields: true
          fields:
            - path: "$.status"
              pattern: "^(connected|disconnected|error)$"
              required: true
            - path: "$.last_ping"
              field_type: "string"
              required: true
        tags: ["database", "resource", "health"]

# Test execution configuration for database operations
test_config:
  timeout_seconds: 60  # Database operations may take longer
  max_concurrency: 2   # Limit concurrent DB operations
  fail_fast: false
  retry:
    max_retries: 3
    retry_delay_ms: 2000
    exponential_backoff: true

# Additional metadata
metadata:
  author: "Database MCP Team"
  documentation: "https://docs.example.com/database-mcp-server"
  license: "Apache-2.0"
  tags: ["database", "sql", "postgresql", "mysql"]
  supported_databases: ["postgresql", "mysql", "sqlite"]
  requirements:
    - "PostgreSQL 12+ or MySQL 8.0+"
    - "Python 3.8+"
    - "Required Python packages: psycopg2, pymysql" 