{
  "initialize": {
    "success": true,
    "response": {
      "jsonrpc": "2.0",
      "id": 1,
      "result": {
        "capabilities": {
          "experimental": {},
          "prompts": {
            "listChanged": false
          },
          "resources": {
            "listChanged": true,
            "subscribe": true
          },
          "tools": {
            "listChanged": true
          }
        },
        "protocolVersion": "2024-11-05",
        "serverInfo": {
          "name": "prism-mcp",
          "version": "0.1.0"
        }
      }
    }
  },
  "list_tools": {
    "success": true,
    "tool_count": 23,
    "tools": [
      "trace_path",
      "find_dependencies",
      "find_references",
      "explain_symbol",
      "search_symbols",
      "repository_stats",
      "search_content",
      "find_files",
      "content_stats",
      "detect_patterns",
      "analyze_complexity",
      "find_duplicates",
      "find_unused_code",
      "trace_data_flow",
      "analyze_transitive_dependencies",
      "trace_inheritance",
      "analyze_decorators",
      "analyze_security",
      "analyze_performance",
      "analyze_api_surface",
      "suggest_analysis_workflow",
      "batch_analysis",
      "optimize_workflow"
    ],
    "response": {
      "jsonrpc": "2.0",
      "id": 1,
      "result": {
        "tools": [
          {
            "description": "Find the shortest path between two code symbols",
            "inputSchema": {
              "properties": {
                "max_depth": {
                  "default": 10,
                  "description": "Maximum search depth",
                  "type": "number"
                },
                "source": {
                  "description": "Source symbol identifier (node ID)",
                  "type": "string"
                },
                "target": {
                  "description": "Target symbol identifier (node ID)",
                  "type": "string"
                }
              },
              "required": [
                "source",
                "target"
              ],
              "type": "object"
            },
            "name": "trace_path",
            "title": "Trace Execution Path"
          },
          {
            "description": "Analyze dependencies for a code symbol or file",
            "inputSchema": {
              "properties": {
                "dependency_type": {
                  "default": "direct",
                  "description": "Type of dependencies to find",
                  "enum": [
                    "direct",
                    "calls",
                    "imports",
                    "reads",
                    "writes"
                  ],
                  "type": "string"
                },
                "target": {
                  "description": "Symbol ID or file path to analyze",
                  "type": "string"
                }
              },
              "required": [
                "target"
              ],
              "type": "object"
            },
            "name": "find_dependencies",
            "title": "Find Dependencies"
          },
          {
            "description": "Find all references to a symbol across the codebase",
            "inputSchema": {
              "properties": {
                "context_lines": {
                  "default": 4,
                  "description": "Number of lines before and after the symbol to include as context",
                  "type": "number"
                },
                "include_definitions": {
                  "default": true,
                  "description": "Include symbol definitions",
                  "type": "boolean"
                },
                "symbol_id": {
                  "description": "Symbol identifier to find references for",
                  "type": "string"
                }
              },
              "required": [
                "symbol_id"
              ],
              "type": "object"
            },
            "name": "find_references",
            "title": "Find References"
          },
          {
            "description": "Provide detailed explanation of a code symbol with context",
            "inputSchema": {
              "properties": {
                "context_lines": {
                  "default": 4,
                  "description": "Number of lines before and after the symbol to include as context",
                  "type": "number"
                },
                "include_dependencies": {
                  "default": false,
                  "description": "Include dependency information",
                  "type": "boolean"
                },
                "include_usages": {
                  "default": false,
                  "description": "Include usage information",
                  "type": "boolean"
                },
                "symbol_id": {
                  "description": "Symbol identifier (node ID)",
                  "type": "string"
                }
              },
              "required": [
                "symbol_id"
              ],
              "type": "object"
            },
            "name": "explain_symbol",
            "title": "Explain Symbol"
          },
          {
            "description": "Search for symbols by name pattern with advanced inheritance filtering",
            "inputSchema": {
              "properties": {
                "context_lines": {
                  "default": 4,
                  "description": "Number of lines before and after the symbol to include as context",
                  "type": "number"
                },
                "inheritance_filters": {
                  "description": "Filter by inheritance relationships (format: 'inherits_from:ClassName', 'metaclass:MetaclassName', 'uses_mixin:MixinName')",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "limit": {
                  "default": 50,
                  "description": "Maximum number of results",
                  "type": "number"
                },
                "pattern": {
                  "description": "Search pattern (supports regex)",
                  "type": "string"
                },
                "symbol_types": {
                  "description": "Filter by symbol types",
                  "items": {
                    "enum": [
                      "function",
                      "class",
                      "variable",
                      "module",
                      "method"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "pattern"
              ],
              "type": "object"
            },
            "name": "search_symbols",
            "title": "Search Symbols"
          },
          {
            "description": "Get comprehensive statistics about the repository",
            "inputSchema": {
              "properties": {},
              "type": "object"
            },
            "name": "repository_stats",
            "title": "Repository Statistics"
          },
          {
            "description": "Search across all content including documentation, comments, and configuration files",
            "inputSchema": {
              "properties": {
                "case_sensitive": {
                  "default": false,
                  "description": "Case sensitive search",
                  "type": "boolean"
                },
                "content_types": {
                  "description": "Types of content to search in",
                  "items": {
                    "enum": [
                      "documentation",
                      "comments",
                      "configuration",
                      "code"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "exclude_patterns": {
                  "description": "File patterns to exclude (regex)",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "file_patterns": {
                  "description": "File patterns to include (regex)",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "include_context": {
                  "default": true,
                  "description": "Include context around matches",
                  "type": "boolean"
                },
                "max_results": {
                  "default": 50,
                  "description": "Maximum number of results",
                  "type": "number"
                },
                "query": {
                  "description": "Search query text",
                  "type": "string"
                },
                "use_regex": {
                  "default": false,
                  "description": "Use regex pattern matching",
                  "type": "boolean"
                }
              },
              "required": [
                "query"
              ],
              "type": "object"
            },
            "name": "search_content",
            "title": "Search Content"
          },
          {
            "description": "Find files by name or path pattern",
            "inputSchema": {
              "properties": {
                "pattern": {
                  "description": "File pattern to search for (supports regex)",
                  "type": "string"
                }
              },
              "required": [
                "pattern"
              ],
              "type": "object"
            },
            "name": "find_files",
            "title": "Find Files"
          },
          {
            "description": "Get statistics about indexed content",
            "inputSchema": {
              "properties": {},
              "type": "object"
            },
            "name": "content_stats",
            "title": "Content Statistics"
          },
          {
            "description": "Identify design patterns, architectural structures, and metaprogramming patterns in the codebase",
            "inputSchema": {
              "properties": {
                "confidence_threshold": {
                  "default": 0.8,
                  "description": "Minimum confidence threshold for pattern detection (0.0 to 1.0)",
                  "maximum": 1.0,
                  "minimum": 0.0,
                  "type": "number"
                },
                "include_suggestions": {
                  "default": true,
                  "description": "Include improvement suggestions for detected patterns",
                  "type": "boolean"
                },
                "pattern_types": {
                  "default": [
                    "all"
                  ],
                  "description": "Types of patterns to detect",
                  "items": {
                    "enum": [
                      "design_patterns",
                      "anti_patterns",
                      "architectural_patterns",
                      "metaprogramming_patterns",
                      "all"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "scope": {
                  "default": "repository",
                  "description": "Scope for pattern detection (repository, package, or file)",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "name": "detect_patterns",
            "title": "Detect Design Patterns"
          },
          {
            "description": "Calculate complexity metrics for code elements including cyclomatic, cognitive, and maintainability metrics",
            "inputSchema": {
              "properties": {
                "metrics": {
                  "default": [
                    "all"
                  ],
                  "description": "Types of complexity metrics to calculate",
                  "items": {
                    "enum": [
                      "cyclomatic",
                      "cognitive",
                      "halstead",
                      "maintainability_index",
                      "all"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "target": {
                  "description": "File path or symbol ID to analyze",
                  "type": "string"
                },
                "threshold_warnings": {
                  "default": true,
                  "description": "Include warnings for metrics exceeding thresholds",
                  "type": "boolean"
                }
              },
              "required": [
                "target"
              ],
              "type": "object"
            },
            "name": "analyze_complexity",
            "title": "Analyze Code Complexity"
          },
          {
            "description": "Detect code duplication and similar code blocks across the codebase",
            "inputSchema": {
              "properties": {
                "exclude_patterns": {
                  "description": "File patterns to exclude from analysis",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "include_semantic_similarity": {
                  "default": true,
                  "description": "Include semantic similarity analysis",
                  "type": "boolean"
                },
                "min_lines": {
                  "default": 5,
                  "description": "Minimum lines for duplicate detection",
                  "minimum": 1,
                  "type": "number"
                },
                "scope": {
                  "default": "repository",
                  "description": "Scope for duplicate detection (repository, package, or specific files)",
                  "type": "string"
                },
                "similarity_threshold": {
                  "default": 0.85,
                  "description": "Similarity threshold (0.0 to 1.0)",
                  "maximum": 1.0,
                  "minimum": 0.0,
                  "type": "number"
                }
              },
              "required": [],
              "type": "object"
            },
            "name": "find_duplicates",
            "title": "Find Code Duplicates"
          },
          {
            "description": "Identify potentially unused code elements including functions, classes, variables, and imports",
            "inputSchema": {
              "properties": {
                "analyze_types": {
                  "default": [
                    "all"
                  ],
                  "description": "Types of code elements to analyze",
                  "items": {
                    "enum": [
                      "functions",
                      "classes",
                      "variables",
                      "imports",
                      "all"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "confidence_threshold": {
                  "default": 0.8,
                  "description": "Confidence threshold for unused detection (0.0 to 1.0)",
                  "maximum": 1.0,
                  "minimum": 0.0,
                  "type": "number"
                },
                "consider_external_apis": {
                  "default": false,
                  "description": "Consider external API usage",
                  "type": "boolean"
                },
                "exclude_patterns": {
                  "description": "File patterns to exclude from analysis",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "include_dead_code": {
                  "default": true,
                  "description": "Include dead code block detection",
                  "type": "boolean"
                },
                "scope": {
                  "default": "repository",
                  "description": "Analysis scope (repository, package, or file)",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "name": "find_unused_code",
            "title": "Find Unused Code"
          },
          {
            "description": "Track data flow through the codebase, following variable assignments, function parameters, and transformations",
            "inputSchema": {
              "properties": {
                "direction": {
                  "default": "forward",
                  "description": "Direction to trace data flow",
                  "enum": [
                    "forward",
                    "backward",
                    "both"
                  ],
                  "type": "string"
                },
                "follow_function_calls": {
                  "default": true,
                  "description": "Follow data flow across function calls",
                  "type": "boolean"
                },
                "include_field_access": {
                  "default": true,
                  "description": "Include field/attribute access patterns",
                  "type": "boolean"
                },
                "include_transformations": {
                  "default": true,
                  "description": "Include data transformations (method calls, assignments)",
                  "type": "boolean"
                },
                "max_depth": {
                  "default": 10,
                  "description": "Maximum depth for data flow tracing",
                  "maximum": 50,
                  "minimum": 1,
                  "type": "number"
                },
                "variable_or_parameter": {
                  "description": "Symbol ID of variable or parameter to trace",
                  "type": "string"
                }
              },
              "required": [
                "variable_or_parameter"
              ],
              "type": "object"
            },
            "name": "trace_data_flow",
            "title": "Trace Data Flow"
          },
          {
            "description": "Analyze complete dependency chains, detect cycles, and map transitive relationships",
            "inputSchema": {
              "properties": {
                "dependency_types": {
                  "default": [
                    "all"
                  ],
                  "description": "Types of dependencies to analyze",
                  "items": {
                    "enum": [
                      "calls",
                      "imports",
                      "reads",
                      "writes",
                      "extends",
                      "implements",
                      "all"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "detect_cycles": {
                  "default": true,
                  "description": "Detect circular dependencies",
                  "type": "boolean"
                },
                "include_external_dependencies": {
                  "default": false,
                  "description": "Include external/third-party dependencies",
                  "type": "boolean"
                },
                "max_depth": {
                  "default": 5,
                  "description": "Maximum depth for transitive analysis",
                  "maximum": 20,
                  "minimum": 1,
                  "type": "number"
                },
                "target": {
                  "description": "Symbol ID or file path to analyze",
                  "type": "string"
                }
              },
              "required": [
                "target"
              ],
              "type": "object"
            },
            "name": "analyze_transitive_dependencies",
            "title": "Analyze Transitive Dependencies"
          },
          {
            "description": "Analyze Python inheritance hierarchies including metaclasses, mixins, and method resolution order with comprehensive metaprogramming analysis",
            "inputSchema": {
              "properties": {
                "class_id": {
                  "description": "Symbol ID of the class to analyze inheritance for",
                  "type": "string"
                },
                "detect_diamond_inheritance": {
                  "default": true,
                  "description": "Detect and analyze diamond inheritance patterns",
                  "type": "boolean"
                },
                "direction": {
                  "default": "both",
                  "description": "Direction to trace inheritance (up=parents, down=children, both=complete tree)",
                  "enum": [
                    "up",
                    "down",
                    "both"
                  ],
                  "type": "string"
                },
                "include_dynamic_attributes": {
                  "default": true,
                  "description": "Include analysis of dynamically added attributes",
                  "type": "boolean"
                },
                "include_metaclass_analysis": {
                  "default": true,
                  "description": "Include detailed metaclass impact analysis",
                  "type": "boolean"
                },
                "include_mixin_analysis": {
                  "default": true,
                  "description": "Include mixin composition analysis",
                  "type": "boolean"
                },
                "include_mro_analysis": {
                  "default": true,
                  "description": "Include Method Resolution Order analysis",
                  "type": "boolean"
                },
                "include_source_context": {
                  "default": false,
                  "description": "Include source code context for inheritance relationships",
                  "type": "boolean"
                },
                "max_depth": {
                  "default": 10,
                  "description": "Maximum inheritance depth to traverse",
                  "maximum": 50,
                  "minimum": 1,
                  "type": "number"
                }
              },
              "required": [
                "class_id"
              ],
              "type": "object"
            },
            "name": "trace_inheritance",
            "title": "Trace Inheritance Hierarchy"
          },
          {
            "description": "Comprehensive decorator analysis including patterns, effects, framework integration, and metaprogramming impacts",
            "inputSchema": {
              "properties": {
                "confidence_threshold": {
                  "default": 0.8,
                  "description": "Confidence threshold for pattern detection (0.0 to 1.0)",
                  "maximum": 1.0,
                  "minimum": 0.0,
                  "type": "number"
                },
                "decorator_id": {
                  "description": "Symbol ID of decorator to analyze (optional - analyzes all if not provided)",
                  "type": "string"
                },
                "framework_detection": {
                  "default": true,
                  "description": "Detect and analyze framework-specific decorators (Flask, Django, FastAPI, etc.)",
                  "type": "boolean"
                },
                "include_chain_analysis": {
                  "default": true,
                  "description": "Include decorator chain composition analysis",
                  "type": "boolean"
                },
                "include_effect_analysis": {
                  "default": true,
                  "description": "Include analysis of decorator effects on target functions/classes",
                  "type": "boolean"
                },
                "include_factory_analysis": {
                  "default": true,
                  "description": "Include decorator factory pattern analysis",
                  "type": "boolean"
                },
                "include_recommendations": {
                  "default": true,
                  "description": "Include best practice recommendations",
                  "type": "boolean"
                },
                "include_usage_analysis": {
                  "default": true,
                  "description": "Include comprehensive usage pattern analysis",
                  "type": "boolean"
                },
                "pattern_detection": {
                  "default": true,
                  "description": "Detect common decorator patterns (caching, validation, authorization, etc.)",
                  "type": "boolean"
                },
                "scope": {
                  "default": "global",
                  "description": "Scope of decorator analysis",
                  "enum": [
                    "global",
                    "file",
                    "class",
                    "specific"
                  ],
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "name": "analyze_decorators",
            "title": "Analyze Decorators"
          },
          {
            "description": "Comprehensive security analysis including vulnerability detection, data flow analysis, and security pattern recognition",
            "inputSchema": {
              "properties": {
                "check_external_dependencies": {
                  "default": false,
                  "description": "Check external dependencies for known vulnerabilities",
                  "type": "boolean"
                },
                "exclude_patterns": {
                  "description": "File patterns to exclude from analysis",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "include_data_flow_analysis": {
                  "default": true,
                  "description": "Include data flow analysis for security",
                  "type": "boolean"
                },
                "scope": {
                  "default": "repository",
                  "description": "Analysis scope (repository, package, or file)",
                  "type": "string"
                },
                "severity_threshold": {
                  "default": "medium",
                  "description": "Minimum severity level to report",
                  "enum": [
                    "low",
                    "medium",
                    "high",
                    "critical"
                  ],
                  "type": "string"
                },
                "vulnerability_types": {
                  "default": [
                    "all"
                  ],
                  "description": "Types of vulnerabilities to detect",
                  "items": {
                    "enum": [
                      "injection",
                      "authentication",
                      "authorization",
                      "data_exposure",
                      "unsafe_patterns",
                      "crypto_issues",
                      "all"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [],
              "type": "object"
            },
            "name": "analyze_security",
            "title": "Analyze Security"
          },
          {
            "description": "Comprehensive performance analysis including algorithmic complexity, bottleneck detection, and optimization suggestions",
            "inputSchema": {
              "properties": {
                "analysis_types": {
                  "default": [
                    "all"
                  ],
                  "description": "Types of performance analysis to conduct",
                  "items": {
                    "enum": [
                      "time_complexity",
                      "memory_usage",
                      "hot_spots",
                      "anti_patterns",
                      "scalability",
                      "all"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "complexity_threshold": {
                  "default": "medium",
                  "description": "Complexity threshold for reporting issues",
                  "enum": [
                    "low",
                    "medium",
                    "high"
                  ],
                  "type": "string"
                },
                "detect_bottlenecks": {
                  "default": true,
                  "description": "Detect potential performance bottlenecks",
                  "type": "boolean"
                },
                "exclude_patterns": {
                  "description": "File patterns to exclude from analysis",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "include_algorithmic_analysis": {
                  "default": true,
                  "description": "Include algorithmic complexity analysis",
                  "type": "boolean"
                },
                "scope": {
                  "default": "repository",
                  "description": "Analysis scope (repository, package, or file)",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "name": "analyze_performance",
            "title": "Analyze Performance"
          },
          {
            "description": "Comprehensive API surface analysis including public interface mapping, versioning compatibility, and documentation coverage",
            "inputSchema": {
              "properties": {
                "analysis_types": {
                  "default": [
                    "all"
                  ],
                  "description": "Types of API analysis to conduct",
                  "items": {
                    "enum": [
                      "public_api",
                      "versioning",
                      "breaking_changes",
                      "documentation_coverage",
                      "compatibility",
                      "all"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "api_version": {
                  "description": "API version to analyze (optional)",
                  "type": "string"
                },
                "check_documentation_coverage": {
                  "default": true,
                  "description": "Check documentation coverage for public APIs",
                  "type": "boolean"
                },
                "detect_breaking_changes": {
                  "default": true,
                  "description": "Detect potential breaking changes",
                  "type": "boolean"
                },
                "exclude_patterns": {
                  "description": "File patterns to exclude from analysis",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "include_private_apis": {
                  "default": false,
                  "description": "Include private/internal APIs in analysis",
                  "type": "boolean"
                },
                "scope": {
                  "default": "repository",
                  "description": "Analysis scope (repository, package, or module)",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "name": "analyze_api_surface",
            "title": "Analyze API Surface"
          },
          {
            "description": "Recommend optimal sequence of analysis tools based on user goals and current context. Provides systematic workflow guidance to achieve specific analysis objectives efficiently.",
            "inputSchema": {
              "additionalProperties": false,
              "properties": {
                "complexity_preference": {
                  "default": "standard",
                  "description": "Analysis depth preference",
                  "enum": [
                    "quick",
                    "standard",
                    "comprehensive"
                  ],
                  "type": "string"
                },
                "current_context": {
                  "description": "Current analysis context (optional)",
                  "properties": {
                    "areas_of_interest": {
                      "description": "Specific areas, files, or patterns to focus on",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "known_issues": {
                      "description": "Known issues or concerns to investigate",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "symbols_analyzed": {
                      "description": "Symbols already analyzed",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "goal": {
                  "description": "Analysis objective: 'understand_codebase', 'find_security_issues', 'analyze_performance', 'trace_data_flow', 'analyze_architecture', 'debug_issue', 'refactor_preparation'",
                  "type": "string"
                },
                "session_id": {
                  "description": "Session ID for context-aware recommendations (optional)",
                  "type": "string"
                },
                "time_constraints": {
                  "description": "Approximate time budget in minutes (optional)",
                  "maximum": 240,
                  "minimum": 5,
                  "type": "integer"
                }
              },
              "required": [
                "goal"
              ],
              "type": "object"
            },
            "name": "suggest_analysis_workflow",
            "title": "Suggest Analysis Workflow"
          },
          {
            "description": "Execute multiple analysis tools in parallel with unified results. Handles dependencies, deduplication, and result merging for efficient bulk analysis.",
            "inputSchema": {
              "properties": {
                "execution_strategy": {
                  "default": "optimized",
                  "enum": [
                    "parallel",
                    "sequential",
                    "optimized"
                  ],
                  "type": "string"
                },
                "merge_results": {
                  "default": true,
                  "type": "boolean"
                },
                "tool_calls": {
                  "description": "Array of tool calls to execute",
                  "items": {
                    "properties": {
                      "parameters": {
                        "type": "object"
                      },
                      "tool_name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "tool_name"
                    ],
                    "type": "object"
                  },
                  "maxItems": 10,
                  "minItems": 1,
                  "type": "array"
                }
              },
              "required": [
                "tool_calls"
              ],
              "type": "object"
            },
            "name": "batch_analysis",
            "title": "Batch Analysis"
          },
          {
            "description": "Analyze and optimize analysis workflows for better performance and efficiency. Provides recommendations for tool sequencing, parallelization, and resource optimization.",
            "inputSchema": {
              "additionalProperties": false,
              "properties": {
                "constraints": {
                  "description": "Optimization constraints",
                  "properties": {
                    "exclude_tools": {
                      "description": "Tools to exclude from optimization",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "memory_limit_mb": {
                      "maximum": 2048,
                      "minimum": 100,
                      "type": "integer"
                    },
                    "must_include_tools": {
                      "description": "Tools that must be included in optimized workflow",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "preserve_accuracy": {
                      "default": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "optimization_goals": {
                  "default": [
                    "speed",
                    "user_experience"
                  ],
                  "description": "Optimization objectives",
                  "items": {
                    "enum": [
                      "speed",
                      "accuracy",
                      "resource_usage",
                      "parallelization",
                      "user_experience"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "session_id": {
                  "description": "Session ID to analyze (optional)",
                  "type": "string"
                },
                "target_performance": {
                  "description": "Performance targets",
                  "properties": {
                    "max_parallel_tools": {
                      "maximum": 10,
                      "minimum": 1,
                      "type": "integer"
                    },
                    "max_total_time_minutes": {
                      "maximum": 60,
                      "minimum": 1,
                      "type": "integer"
                    },
                    "target_success_rate": {
                      "maximum": 1.0,
                      "minimum": 0.5,
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "workflow_history": {
                  "description": "History of tool calls to analyze",
                  "items": {
                    "properties": {
                      "execution_time_ms": {
                        "type": "integer"
                      },
                      "parameters": {
                        "type": "object"
                      },
                      "success": {
                        "type": "boolean"
                      },
                      "timestamp": {
                        "type": "string"
                      },
                      "tool_name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "tool_name",
                      "execution_time_ms",
                      "success"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "name": "optimize_workflow",
            "title": "Optimize Workflow"
          }
        ]
      }
    }
  },
  "trace_path": {
    "success": false,
    "is_placeholder": true,
    "response": {
      "jsonrpc": "2.0",
      "id": 1,
      "error": {
        "code": -32603,
        "message": "Tool call error: Missing source parameter"
      }
    }
  },
  "find_dependencies": {
    "success": false,
    "is_placeholder": true,
    "response": {
      "jsonrpc": "2.0",
      "id": 1,
      "error": {
        "code": -32603,
        "message": "Tool call error: Missing target parameter"
      }
    }
  },
  "find_references": {
    "success": false,
    "is_placeholder": true,
    "response": {
      "jsonrpc": "2.0",
      "id": 1,
      "error": {
        "code": -32603,
        "message": "Tool call error: Missing symbol_id parameter"
      }
    }
  },
  "explain_symbol": {
    "success": false,
    "is_placeholder": true,
    "response": {
      "jsonrpc": "2.0",
      "id": 1,
      "error": {
        "code": -32603,
        "message": "Tool call error: Missing symbol_id parameter"
      }
    }
  },
  "search_symbols": {
    "success": true,
    "is_placeholder": false,
    "response": {
      "jsonrpc": "2.0",
      "id": 1,
      "result": {
        "content": [
          {
            "text": "{\n  \"inheritance_filters_applied\": false,\n  \"pattern\": \"Agent\",\n  \"results\": []\n}",
            "type": "text"
          }
        ],
        "isError": false
      }
    }
  },
  "repository_stats": {
    "success": true,
    "is_placeholder": false,
    "response": {
      "jsonrpc": "2.0",
      "id": 1,
      "result": {
        "content": [
          {
            "text": "{\n  \"error\": \"No repository initialized\"\n}",
            "type": "text"
          }
        ],
        "isError": false
      }
    }
  },
  "search_content": {
    "success": true,
    "is_placeholder": false,
    "response": {
      "jsonrpc": "2.0",
      "id": 1,
      "result": {
        "content": [
          {
            "text": "{\n  \"message\": \"Content search is not yet indexed. This feature requires repository content to be indexed first.\",\n  \"query\": \"class Agent\",\n  \"results\": [],\n  \"status\": \"no_content_indexed\",\n  \"suggestion\": \"Repository indexing may still be in progress. Try again in a few moments.\",\n  \"total_results\": 0\n}",
            "type": "text"
          }
        ],
        "isError": false
      }
    }
  },
  "find_files": {
    "success": true,
    "is_placeholder": false,
    "response": {
      "jsonrpc": "2.0",
      "id": 1,
      "result": {
        "content": [
          {
            "text": "{\n  \"files\": [],\n  \"message\": \"No repository is currently loaded\",\n  \"pattern\": \"*.py\",\n  \"source\": \"no_repository\",\n  \"total_files\": 0\n}",
            "type": "text"
          }
        ],
        "isError": false
      }
    }
  },
  "content_stats": {
    "success": true,
    "is_placeholder": false,
    "response": {
      "jsonrpc": "2.0",
      "id": 1,
      "result": {
        "content": [
          {
            "text": "{\n  \"content_by_type\": {},\n  \"message\": \"Content indexing has not been performed yet. Only code symbol analysis is available.\",\n  \"size_distribution\": {},\n  \"status\": \"no_content_indexed\",\n  \"suggestion\": \"Content indexing for documentation, configuration files, and comments may still be in progress.\",\n  \"total_chunks\": 0,\n  \"total_files\": 0,\n  \"total_tokens\": 0\n}",
            "type": "text"
          }
        ],
        "isError": false
      }
    }
  },
  "detect_patterns": {
    "success": true,
    "is_placeholder": false,
    "response": {
      "jsonrpc": "2.0",
      "id": 1,
      "result": {
        "content": [
          {
            "text": "{\n  \"analysis\": {\n    \"confidence_threshold\": 0.8,\n    \"include_suggestions\": true,\n    \"pattern_types_analyzed\": [\n      \"all\"\n    ],\n    \"total_patterns_detected\": 0\n  },\n  \"analysis_metadata\": {\n    \"note\": \"Pattern detection will be significantly enhanced in Phase 2 with advanced metaprogramming analysis\",\n    \"version\": \"1.0.0-phase1\"\n  },\n  \"patterns\": [],\n  \"summary\": {\n    \"architectural_health\": \"needs_analysis\",\n    \"complexity_indicators\": {\n      \"density\": 0.0,\n      \"total_edges\": 0,\n      \"total_nodes\": 0\n    }\n  }\n}",
            "type": "text"
          }
        ],
        "isError": false
      }
    }
  },
  "analyze_complexity": {
    "success": false,
    "is_placeholder": true,
    "response": {
      "jsonrpc": "2.0",
      "id": 1,
      "error": {
        "code": -32603,
        "message": "Tool call error: Missing target parameter"
      }
    }
  },
  "find_duplicates": {
    "success": true,
    "is_placeholder": true,
    "response": {
      "jsonrpc": "2.0",
      "id": 1,
      "result": {
        "content": [
          {
            "text": "{\n  \"analysis\": {\n    \"message\": \"Full duplicate detection implementation will be completed in Phase 1 continuation\",\n    \"status\": \"phase1_implementation\"\n  },\n  \"duplicates\": [],\n  \"note\": \"This tool is being modularized as part of Phase 1 enhancement. Full implementation coming soon.\",\n  \"summary\": {\n    \"affected_files\": 0,\n    \"total_duplicate_pairs\": 0\n  }\n}",
            "type": "text"
          }
        ],
        "isError": false
      }
    }
  },
  "find_unused_code": {
    "success": true,
    "is_placeholder": true,
    "response": {
      "jsonrpc": "2.0",
      "id": 1,
      "result": {
        "content": [
          {
            "text": "{\n  \"analysis\": {\n    \"message\": \"Full unused code detection implementation will be completed in Phase 1 continuation\",\n    \"status\": \"phase1_implementation\"\n  },\n  \"note\": \"This tool is being modularized as part of Phase 1 enhancement. Full implementation coming soon.\",\n  \"summary\": {\n    \"confidence_average\": 0.0,\n    \"total_unused\": 0\n  },\n  \"unused_elements\": {\n    \"classes\": [],\n    \"functions\": [],\n    \"imports\": [],\n    \"variables\": []\n  }\n}",
            "type": "text"
          }
        ],
        "isError": false
      }
    }
  },
  "trace_data_flow": {
    "success": false,
    "is_placeholder": true,
    "response": {
      "jsonrpc": "2.0",
      "id": 1,
      "error": {
        "code": -32603,
        "message": "Tool call error: Missing variable_or_parameter"
      }
    }
  },
  "analyze_transitive_dependencies": {
    "success": false,
    "is_placeholder": true,
    "response": {
      "jsonrpc": "2.0",
      "id": 1,
      "error": {
        "code": -32603,
        "message": "Tool call error: Missing target"
      }
    }
  },
  "trace_inheritance": {
    "success": true,
    "is_placeholder": false,
    "response": {
      "jsonrpc": "2.0",
      "id": 1,
      "result": {
        "content": [
          {
            "text": "No classes found matching pattern: Agent",
            "type": "text"
          }
        ],
        "isError": true
      }
    }
  },
  "analyze_decorators": {
    "success": true,
    "is_placeholder": false,
    "response": {
      "jsonrpc": "2.0",
      "id": 1,
      "result": {
        "content": [
          {
            "text": "Either decorator_pattern or decorator_id parameter is required",
            "type": "text"
          }
        ],
        "isError": true
      }
    }
  },
  "analyze_security": {
    "success": true,
    "is_placeholder": true,
    "response": {
      "jsonrpc": "2.0",
      "id": 1,
      "result": {
        "content": [
          {
            "text": "{\n  \"analysis\": {\n    \"message\": \"Full security analysis implementation will be completed in Phase 1 continuation\",\n    \"status\": \"phase1_implementation\"\n  },\n  \"note\": \"This tool is being modularized as part of Phase 1 enhancement. Full implementation coming soon.\",\n  \"recommendations\": [],\n  \"security_score\": \"unknown\",\n  \"vulnerabilities\": []\n}",
            "type": "text"
          }
        ],
        "isError": false
      }
    }
  },
  "analyze_performance": {
    "success": true,
    "is_placeholder": true,
    "response": {
      "jsonrpc": "2.0",
      "id": 1,
      "result": {
        "content": [
          {
            "text": "{\n  \"analysis\": {\n    \"message\": \"Full performance analysis implementation will be completed in Phase 1 continuation\",\n    \"status\": \"phase1_implementation\"\n  },\n  \"note\": \"This tool is being modularized as part of Phase 1 enhancement. Full implementation coming soon.\",\n  \"performance_issues\": [],\n  \"performance_score\": \"unknown\",\n  \"recommendations\": []\n}",
            "type": "text"
          }
        ],
        "isError": false
      }
    }
  },
  "analyze_api_surface": {
    "success": true,
    "is_placeholder": true,
    "response": {
      "jsonrpc": "2.0",
      "id": 1,
      "result": {
        "content": [
          {
            "text": "{\n  \"analysis\": {\n    \"message\": \"Full API surface analysis implementation will be completed in Phase 1 continuation\",\n    \"status\": \"phase1_implementation\"\n  },\n  \"api_surface\": {\n    \"documentation_coverage\": {},\n    \"private_apis\": [],\n    \"public_apis\": [],\n    \"versioning_info\": {}\n  },\n  \"issues\": [],\n  \"note\": \"This tool is being modularized as part of Phase 1 enhancement. Full implementation coming soon.\",\n  \"recommendations\": []\n}",
            "type": "text"
          }
        ],
        "isError": false
      }
    }
  },
  "suggest_analysis_workflow": {
    "success": false,
    "is_placeholder": true,
    "response": {
      "jsonrpc": "2.0",
      "id": 1,
      "error": {
        "code": -32603,
        "message": "Tool call error: Unknown analysis goal: understand_architecture"
      }
    }
  },
  "batch_analysis": {
    "success": true,
    "is_placeholder": false,
    "response": {
      "jsonrpc": "2.0",
      "id": 1,
      "result": {
        "content": [
          {
            "text": "{\n  \"batch_summary\": {\n    \"execution_strategy\": \"optimized\",\n    \"status\": \"completed\",\n    \"total_tools\": 1\n  },\n  \"individual_results\": [\n    {\n      \"index\": 0,\n      \"result\": \"Mock result for unknown\",\n      \"status\": \"executed\",\n      \"tool\": \"unknown\"\n    }\n  ],\n  \"optimization_suggestions\": [\n    \"Consider parallel execution for analysis tools\",\n    \"Cache results for repeated tool calls\"\n  ]\n}",
            "type": "text"
          }
        ],
        "isError": false
      }
    }
  },
  "optimize_workflow": {
    "success": false,
    "is_placeholder": true,
    "response": {
      "jsonrpc": "2.0",
      "id": 1,
      "error": {
        "code": -32603,
        "message": "Tool call error: Either workflow_history or session_id must be provided"
      }
    }
  }
}