"""
Mock pydantic package for testing dependency filtering.
"""

from typing import Any, Dict, Optional, Type, TypeVar


class Field:
    """Mock Field class."""
    
    def __init__(self, default: Any = None, **kwargs):
        self.default = default
        self.kwargs = kwargs


class BaseModel:
    """Mock BaseModel class."""
    
    def __init__(self, **data):
        for key, value in data.items():
            setattr(self, key, value)
    
    def dict(self) -> Dict[str, Any]:
        """Convert to dictionary."""
        return {k: v for k, v in self.__dict__.items() if not k.startswith('_')}
    
    class Config:
        """Configuration class."""
        validate_assignment = False


T = TypeVar('T', bound=BaseModel)


def validator(field_name: str):
    """Mock validator decorator."""
    def decorator(func):
        return func
    return decorator 