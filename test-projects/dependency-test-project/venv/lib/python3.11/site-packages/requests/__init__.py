"""
Mock requests package for testing dependency filtering.
"""

from typing import Any, Dict, Optional, Union


class Response:
    """Mock HTTP response."""
    
    def __init__(self, status_code: int = 200, content: bytes = b"", headers: Dict[str, str] = None):
        self.status_code = status_code
        self.content = content
        self.headers = headers or {}
        self.text = content.decode('utf-8') if content else ""
    
    def json(self) -> Any:
        """Parse JSON response."""
        import json
        return json.loads(self.text) if self.text else {}
    
    def raise_for_status(self) -> None:
        """Raise exception for bad status codes."""
        if self.status_code >= 400:
            raise HTTPError(f"HTTP {self.status_code} Error")


class HTTPError(Exception):
    """HTTP error exception."""
    pass


class Session:
    """Mock HTTP session."""
    
    def __init__(self):
        self.headers = {}
        self.cookies = {}
    
    def get(self, url: str, **kwargs) -> Response:
        """Mock GET request."""
        return Response(200, b'{"status": "ok"}')
    
    def post(self, url: str, **kwargs) -> Response:
        """Mock POST request."""
        return Response(201, b'{"created": true}')
    
    def put(self, url: str, **kwargs) -> Response:
        """Mock PUT request."""
        return Response(200, b'{"updated": true}')
    
    def delete(self, url: str, **kwargs) -> Response:
        """Mock DELETE request."""
        return Response(204, b'')
    
    def close(self) -> None:
        """Close the session."""
        pass


def get(url: str, **kwargs) -> Response:
    """Make a GET request."""
    session = Session()
    return session.get(url, **kwargs)


def post(url: str, **kwargs) -> Response:
    """Make a POST request."""
    session = Session()
    return session.post(url, **kwargs) 