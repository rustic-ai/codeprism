"""
Mock SQLAlchemy package for testing dependency filtering.
"""

from typing import Any, Optional, Type, TypeVar


class Column:
    """Mock SQLAlchemy Column."""
    
    def __init__(self, column_type: Type, *args, **kwargs):
        self.type = column_type
        self.args = args
        self.kwargs = kwargs


class Integer:
    """Mock Integer type."""
    pass


class String:
    """Mock String type."""
    
    def __init__(self, length: Optional[int] = None):
        self.length = length


class Boolean:
    """Mock Boolean type."""
    pass


class DateTime:
    """Mock DateTime type."""
    pass


class MetaData:
    """Mock metadata."""
    
    def __init__(self):
        self.tables = {}


class Table:
    """Mock table."""
    
    def __init__(self, name: str, metadata: MetaData, *columns):
        self.name = name
        self.metadata = metadata
        self.columns = columns


class Engine:
    """Mock database engine."""
    
    def __init__(self, connection_string: str):
        self.connection_string = connection_string
    
    def connect(self):
        """Mock connection."""
        return Connection(self)


class Connection:
    """Mock database connection."""
    
    def __init__(self, engine: Engine):
        self.engine = engine
    
    def close(self):
        """Close connection."""
        pass


def create_engine(connection_string: str, **kwargs) -> Engine:
    """Create a mock database engine."""
    return Engine(connection_string) 