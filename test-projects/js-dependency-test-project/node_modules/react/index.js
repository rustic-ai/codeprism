/**
 * Mock React package for dependency filtering tests
 * This simulates the main React library entry point
 */

// Core React components and hooks
export const Component = class Component {
  constructor(props) {
    this.props = props;
    this.state = {};
  }
  
  setState(state) {
    this.state = { ...this.state, ...state };
  }
  
  render() {
    throw new Error('render() must be implemented');
  }
};

export const PureComponent = class PureComponent extends Component {};

export const createElement = (type, props, ...children) => {
  return {
    type,
    props: { ...props, children },
  };
};

export const useState = (initial) => {
  return [initial, () => {}];
};

export const useEffect = (fn, deps) => {
  fn();
};

export const useCallback = (fn, deps) => fn;

export const useMemo = (fn, deps) => fn();

export const useContext = (context) => context.defaultValue;

export const useReducer = (reducer, initial) => [initial, () => {}];

export const useRef = (initial) => ({ current: initial });

export const createContext = (defaultValue) => ({
  Provider: Component,
  Consumer: Component,
  defaultValue,
});

// React version
export const version = '18.2.0';

// Default export
const React = {
  Component,
  PureComponent,
  createElement,
  useState,
  useEffect,
  useCallback,
  useMemo,
  useContext,
  useReducer,
  useRef,
  createContext,
  version,
};

export default React; 